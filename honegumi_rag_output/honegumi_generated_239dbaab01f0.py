# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


objective_name = "yield_percent"

rng = np.random.default_rng(42)


def evaluate_chemical_reaction_yield(temperature_celsius: float, pressure_bar: float) -> float:
    """
    Evaluate the reaction yield (%) as a function of temperature (°C) and pressure (bar).

    This stub simulates a physically plausible response surface:
    - Yield peaks around an optimal temperature and pressure.
    - Too low/high temperature or pressure reduces yield.
    - Small Gaussian noise simulates experimental variability.

    Replace this with real experimental measurement or a high-fidelity simulator if available.
    """
    # Gaussian peak around an optimum in T and P
    t_opt = 150.0  # °C
    p_opt = 6.0    # bar

    t_width = 22.0  # °C spread of optimal region
    p_width = 1.8   # bar spread of optimal region

    # Temperature and pressure response components (both in [0, 1])
    temp_response = np.exp(-0.5 * ((temperature_celsius - t_opt) / t_width) ** 2)
    pressure_response = np.exp(-0.5 * ((pressure_bar - p_opt) / p_width) ** 2)

    # Peak yield below 100% with a small baseline yield even in suboptimal conditions
    peak_yield = 92.0  # %
    baseline = 5.0     # %

    deterministic_yield = baseline + peak_yield * temp_response * pressure_response

    # Add small measurement noise (simulate experimental variability)
    noisy_yield = deterministic_yield + rng.normal(0.0, 1.0)

    # Clamp to [0, 100] %
    return float(np.clip(noisy_yield, 0.0, 100.0))


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "temperature_celsius", "type": "range", "bounds": [50.0, 200.0]},
        {"name": "pressure_bar", "type": "range", "bounds": [1.0, 10.0]},
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
)

# Run optimization
num_trials = 25
for _ in range(num_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    temperature_celsius = parameterization["temperature_celsius"]
    pressure_bar = parameterization["pressure_bar"]

    # Evaluate the reaction yield
    yield_value = evaluate_chemical_reaction_yield(temperature_celsius, pressure_bar)

    # Report results back to Ax; provide as dict metric_name -> value
    ax_client.complete_trial(trial_index=trial_index, raw_data={objective_name: yield_value})

best_parameters, best_metrics = ax_client.get_best_parameters()

print("Best operating conditions found:")
print(best_parameters)
print("Best observed metrics:")
print(best_metrics)

# Plot optimization progress
df = ax_client.get_trials_data_frame()
y = df[objective_name].to_numpy()
indices = df.index.to_numpy()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(indices, y, ec="k", fc="none", label="Observed yield")
ax.plot(indices, np.maximum.accumulate(y), color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel("Yield (%)")
ax.set_title("Bayesian Optimization of Reaction Yield")
ax.legend()
plt.tight_layout()
plt.show()