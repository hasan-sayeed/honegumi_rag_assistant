# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Problem: Optimize ceramic sintering to maximize part density (g/cm³)
# Parameters:
#   - furnace_temperature_c: 800–1200 °C
#   - sintering_time_h: 1–6 hours
# Objective:
#   - part_density (maximize)
# Trials budget: 25


def evaluate_sintering_process(furnace_temperature_c: float, sintering_time_h: float) -> float:
    """Deterministic simulator for final part density (g/cm³) after sintering.
    
    Replace this with the actual measurement from your QC pipeline by:
      - Running a sintering cycle at the given temperature and time
      - Measuring the resulting bulk density (e.g., Archimedes method)
      - Returning the measured value as a float (g/cm³)

    Notes:
      - This surrogate is smooth and has an interior optimum to guide BO.
      - It is noise-free to reflect repeatable QC measurements.
    """
    T = float(furnace_temperature_c)
    t = float(sintering_time_h)

    # Baseline densification behavior: increases with T and time, then saturates.
    base = 3.50
    temp_effect = 0.15 * (1.0 / (1.0 + np.exp(-(T - 950.0) / 25.0)))
    time_effect = 1.0 / (1.0 + np.exp(-(t - 2.0) / 0.5))
    baseline = base + temp_effect * time_effect

    # Interior peak around an empirically plausible optimum (e.g., 1125°C, 4.0 h)
    peak = 0.25 * np.exp(-0.5 * ((T - 1125.0) / 45.0) ** 2 - 0.5 * ((t - 4.0) / 0.8) ** 2)

    # Mild over-sintering penalty at very high temperatures
    over_temp_penalty = 0.05 * (np.tanh((T - 1180.0) / 15.0) + 1.0) / 2.0

    density_g_per_cm3 = baseline + peak - over_temp_penalty

    # Physically reasonable clipping for ceramics like alumina/zirconia blends
    return float(np.clip(density_g_per_cm3, 3.40, 4.20))


if __name__ == "__main__":
    # Initialize Ax optimization client
    ax_client = AxClient(random_seed=2025)

    metric_name = "part_density"

    # Define experiment
    ax_client.create_experiment(
        name="ceramic_sintering_density_optimization",
        parameters=[
            {
                "name": "furnace_temperature_c",
                "type": "range",
                "bounds": [800.0, 1200.0],
            },
            {
                "name": "sintering_time_h",
                "type": "range",
                "bounds": [1.0, 6.0],
            },
        ],
        objectives={
            metric_name: ObjectiveProperties(minimize=False),
        },
    )

    # Run optimization for the allocated budget
    n_trials = 25
    for i in range(n_trials):
        parameterization, trial_index = ax_client.get_next_trial()

        # Extract parameters
        furnace_temperature_c = float(parameterization["furnace_temperature_c"])
        sintering_time_h = float(parameterization["sintering_time_h"])

        # Evaluate (replace with real QC measurement in production)
        result = evaluate_sintering_process(furnace_temperature_c, sintering_time_h)

        # Report result back to Ax; single-objective can be returned as a float
        ax_client.complete_trial(trial_index=trial_index, raw_data=result)

    # Retrieve best found parameters and corresponding objective values
    best_parameters, best_metrics = ax_client.get_best_parameters()
    best_density = best_metrics[metric_name][0] if isinstance(best_metrics[metric_name], tuple) else best_metrics[metric_name]

    print("Best parameters found:")
    print(f"  furnace_temperature_c: {best_parameters['furnace_temperature_c']:.2f} °C")
    print(f"  sintering_time_h:      {best_parameters['sintering_time_h']:.2f} h")
    print(f"Estimated best part density: {best_density:.4f} g/cm³")

    # Plot results
    objectives = ax_client.objective_names
    df = ax_client.get_trials_data_frame()

    metric_col = objectives[0]
    fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
    ax.scatter(df.index, df[metric_col], ec="k", fc="none", label="Observed")
    ax.plot(
        df.index,
        np.maximum.accumulate(df[metric_col]),
        color="#0033FF",
        lw=2,
        label="Best to Trial",
    )
    ax.set_xlabel("Trial Number")
    ax.set_ylabel(f"{metric_col} (g/cm³)")
    ax.set_title("Ceramic Sintering: Part Density over Trials")
    ax.legend()
    plt.tight_layout()
    plt.show()