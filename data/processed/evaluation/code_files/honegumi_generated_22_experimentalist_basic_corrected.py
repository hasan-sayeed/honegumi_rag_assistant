# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# Generated by adapting Honegumi template to spray coating optimization
# %pip install ax-platform==0.4.3 matplotlib numpy pandas

from typing import Dict, Tuple
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from ax.service.ax_client import AxClient, ObjectiveProperties


# Domain-specific configuration
OBJECTIVE_NAME = "thickness_variation_percent"  # lower is better

# Parameter bounds (from problem description)
SPRAY_DISTANCE_CM_BOUNDS = (10.0, 30.0)  # cm
AIR_PRESSURE_BAR_BOUNDS = (1.0, 4.0)     # bar

TOTAL_TRIALS = 25  # budget


def evaluate_spray_coating_uniformity(spray_distance_cm: float, air_pressure_bar: float) -> float:
    """Deterministic simulation of coating thickness variation (%).
    
    Replace this with your actual measurement routine that:
      - Applies coating at the specified spray distance and air pressure,
      - Measures coating thickness across the part or coupons,
      - Computes the variation percentage (e.g., 100 * std(thickness) / mean(thickness) or range/mean).

    This surrogate is physics-inspired and deterministic to match "repeatable measurements":
      - Variation increases when spray distance is too close or too far (over/under atomization footprint).
      - Variation increases when pressure is too low or too high (poor atomization or excessive rebound).
      - Interaction terms penalize problematic combinations (e.g., high pressure at short distance).
    """
    d = float(spray_distance_cm)
    p = float(air_pressure_bar)

    # Quadratic bowls around nominal operating point (20 cm, 2.5 bar)
    base = 2.0  # baseline achievable variation (%)
    dist_penalty = 0.04 * (d - 20.0) ** 2         # ~ +4% at 10 or 30 cm
    press_penalty = 0.70 * (p - 2.5) ** 2         # ~ +1.6% at 1.0 or 4.0 bar

    # Mild cross-coupling term
    cross = 0.005 * (d - 20.0) * (p - 2.5)

    # Local interaction penalties for known problematic regimes
    # High pressure too close: turbulence and bounce-back
    penalty_close_highp = 0.06 * np.exp(-((d - 12.0) / 3.0) ** 2) * (max(0.0, p - 3.0)) ** 2
    # Far distance with low pressure: insufficient momentum, patchiness
    penalty_far_lowp = 0.08 * np.exp(-((d - 28.0) / 3.0) ** 2) * (max(0.0, 2.0 - p)) ** 2

    variation_percent = base + dist_penalty + press_penalty + cross + penalty_close_highp + penalty_far_lowp

    # Clip to a reasonable range to avoid pathological values
    variation_percent = float(np.clip(variation_percent, 0.5, 25.0))

    return variation_percent


# Initialize Ax client (set seed for reproducibility of suggestions)
ax_client = AxClient(random_seed=2025)

# Create experiment for optimizing coating thickness variation
ax_client.create_experiment(
    name="spray_coating_uniformity_optimization",
    parameters=[
        {"name": "spray_distance_cm", "type": "range", "bounds": list(SPRAY_DISTANCE_CM_BOUNDS)},
        {"name": "air_pressure_bar", "type": "range", "bounds": list(AIR_PRESSURE_BAR_BOUNDS)},
    ],
    objectives={
        OBJECTIVE_NAME: ObjectiveProperties(minimize=True),
    },
)

# Optimization loop
for _ in range(TOTAL_TRIALS):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters for this trial
    spray_distance_cm = float(parameterization["spray_distance_cm"])
    air_pressure_bar = float(parameterization["air_pressure_bar"])

    try:
        # Evaluate objective (deterministic as per problem statement)
        variation = evaluate_spray_coating_uniformity(
            spray_distance_cm=spray_distance_cm,
            air_pressure_bar=air_pressure_bar,
        )
        # Report result with zero SEM to indicate repeatable/deterministic measurement
        ax_client.complete_trial(
            trial_index=trial_index,
            raw_data={OBJECTIVE_NAME: (variation, 0.0)},
        )
    except Exception as e:
        ax_client.log_trial_failure(trial_index=trial_index)
        print(f"Trial {trial_index} failed due to error: {e}")

# Retrieve best found parameters and performance
best_parameters, best_values = ax_client.get_best_parameters()
best_objective_mean = best_values[OBJECTIVE_NAME]["mean"]
best_objective_sem = best_values[OBJECTIVE_NAME]["sem"]

print("Best settings found:")
print(f"  spray_distance_cm: {best_parameters['spray_distance_cm']:.3f} cm")
print(f"  air_pressure_bar:  {best_parameters['air_pressure_bar']:.3f} bar")
print(f"Estimated thickness variation at best settings: {best_objective_mean:.3f}% Â± {best_objective_sem:.3f}%")

# Visualization: objective over trials
df = ax_client.get_trials_data_frame()

if OBJECTIVE_NAME in df.columns:
    x = df["trial_index"].values
    y = df[OBJECTIVE_NAME].values.astype(float)

    fig, ax = plt.subplots(figsize=(7, 4), dpi=140)
    ax.scatter(x, y, s=24, ec="k", fc="none", label="Observed")
    ax.plot(x, np.minimum.accumulate(y), color="#0033FF", lw=2, label="Best so far")
    ax.set_xlabel("Trial number")
    ax.set_ylabel("Thickness variation (%)")
    ax.set_title("Spray coating optimization: thickness variation over trials")
    ax.grid(True, alpha=0.2)
    ax.legend()
    plt.tight_layout()
    plt.show()
else:
    print("No objective column found in trials data frame; skipping plot.")