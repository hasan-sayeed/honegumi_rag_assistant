# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"
obj2_name = "branin_swapped"


def branin3_moo(x1, x2, x3):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    # Contrived way to incorporate x3 into the objective
    y = y * (1 + 0.1 * x1 * x2 * x3)

    # second objective has x1 and x2 swapped
    y2 = float(
        (x1 - 5.1 / (4 * np.pi**2) * x2**2 + 5.0 / np.pi * x2 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x2)
        + 10
    )

    # Contrived way to incorporate x3 into the second objective
    y2 = y2 * (1 - 0.1 * x1 * x2 * x3)

    return {obj1_name: y, obj2_name: y2}


# Define total for compositional constraint, where x1 + x2 + x3 == total
total = 10.0


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [0.0, total]},
        {"name": "x2", "type": "range", "bounds": [0.0, total]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
        obj2_name: ObjectiveProperties(minimize=True),
    },
    parameter_constraints=[
        f"x1 + x2 <= {total}",  # reparameterized compositional constraint, which is a type of sum constraint
    ],
)


for i in range(21):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]
    x3 = total - (x1 + x2)  # composition constraint: x1 + x2 + x3 == total

    results = branin3_moo(x1, x2, x3)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)
pareto_results = ax_client.get_pareto_optimal_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
pareto = ax_client.get_pareto_optimal_parameters(use_model_predictions=False)
pareto_data = [p[1][0] for p in pareto.values()]
pareto = pd.DataFrame(pareto_data).sort_values(objectives[0])

ax.scatter(df[objectives[0]], df[objectives[1]], fc="None", ec="k", label="Observed")
ax.plot(
    pareto[objectives[0]],
    pareto[objectives[1]],
    color="#0033FF",
    lw=2,
    label="Pareto Front",
)
ax.set_xlabel(objectives[0])
ax.set_ylabel(objectives[1])

ax.legend()
plt.show()

# Generated from Honegumi skeleton and adapted to: Drug formulation MOO (bioavailability %, shelf life months)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt
import random


# Reproducibility
np.random.seed(42)
random.seed(42)


# Objective names
BIOAVAILABILITY = "bioavailability"
SHELF_LIFE = "shelf_life"


def evaluate_formulation(
    excipient_polymer_binder: float,
    excipient_surfactant: float,
    excipient_disintegrant: float,
    excipient_filler: float,
    excipient_antioxidant_stabilizer: float,
    pH: float,
    storage_temperature_c: float,
) -> dict:
    """
    Simulated evaluation of an oral drug formulation.
    Returns:
      - bioavailability (%): higher is better
      - shelf_life (months): higher is better

    This is a realistic stub for demonstration. Replace with your real lab/plant evaluation.
    """
    # Safety guards (should not trigger under proper constraints)
    excipient_polymer_binder = float(np.clip(excipient_polymer_binder, 0.0, 1.0))
    excipient_surfactant = float(np.clip(excipient_surfactant, 0.0, 1.0))
    excipient_disintegrant = float(np.clip(excipient_disintegrant, 0.0, 1.0))
    excipient_filler = float(np.clip(excipient_filler, 0.0, 1.0))
    excipient_antioxidant_stabilizer = float(np.clip(excipient_antioxidant_stabilizer, 0.0, 1.0))
    pH = float(np.clip(pH, 3.0, 7.0))
    storage_temperature_c = float(np.clip(storage_temperature_c, 15.0, 30.0))

    # Helper functions
    def logistic(x):
        return 1.0 / (1.0 + np.exp(-x))

    # Bioavailability model (%)
    # - Surfactant improves solubility up to ~0.15
    surf_eff = 60.0 * logistic(8.0 * (excipient_surfactant - 0.08))
    # - Disintegrant improves dissolution up to ~0.10
    dis_eff = 20.0 * logistic(10.0 * (excipient_disintegrant - 0.05))
    # - Too much binder can retard release
    binder_pen = -15.0 * max(0.0, excipient_polymer_binder - 0.20)
    # - Filler dilutes API fraction and can slow release
    filler_pen = -10.0 * excipient_filler
    # - pH optimum near 5.5 (parabolic penalty)
    ph_pen = -25.0 * ((pH - 5.5) / 1.5) ** 2

    bioavailability_mean = 20.0 + surf_eff + dis_eff + binder_pen + filler_pen + ph_pen
    bioavailability_mean = float(np.clip(bioavailability_mean, 0.0, 100.0))

    # Shelf life model (months)
    # - Antioxidant stabilizer increases shelf life up to ~0.10
    anti_eff = 24.0 * logistic(10.0 * (excipient_antioxidant_stabilizer - 0.05))
    # - Lower storage temperature improves shelf life (linear degradation with T)
    temp_pen = -0.8 * (storage_temperature_c - 15.0)  # -12 mo from 15C to 30C
    # - pH closer to neutral typically more stable for many APIs/excipients
    ph_stab = -10.0 * ((pH - 6.0) / 1.5) ** 2
    # - Binder can enhance mechanical stability a bit (up to +6 months)
    binder_boost = 6.0 * min(excipient_polymer_binder, 0.20) / 0.20
    # - High surfactant levels sometimes reduce stability (oxidative/peroxide impurities)
    surf_pen = -6.0 * max(0.0, excipient_surfactant - 0.10) / 0.40  # saturate around 0.50

    shelf_life_mean = 6.0 + anti_eff + temp_pen + ph_stab + binder_boost + surf_pen
    shelf_life_mean = float(np.clip(shelf_life_mean, 0.0, 36.0))

    # Add observational noise (represent lab measurement noise / batch variability)
    bio_noise_sd = 2.0
    shelf_noise_sd = 0.6
    bioavailability_obs = float(np.clip(bioavailability_mean + np.random.normal(0.0, bio_noise_sd), 0.0, 100.0))
    shelf_life_obs = float(np.clip(shelf_life_mean + np.random.normal(0.0, shelf_noise_sd), 0.0, 36.0))

    return {BIOAVAILABILITY: bioavailability_obs, SHELF_LIFE: shelf_life_obs}


# Ax setup
ax_client = AxClient()

# We reparameterize the 5-fraction composition using 4 free variables:
# Let e1..e4 be free in [0,1], with Sum(e1..e4) <= 1. Then e5 = 1 - Sum(e1..e4).
ax_client.create_experiment(
    name="drug_formulation_moo",
    parameters=[
        {
            "name": "excipient_polymer_binder",
            "type": "range",
            "bounds": [0.0, 1.0],
            "value_type": "float",
            "unit": "fraction",
        },
        {
            "name": "excipient_surfactant",
            "type": "range",
            "bounds": [0.0, 1.0],
            "value_type": "float",
            "unit": "fraction",
        },
        {
            "name": "excipient_disintegrant",
            "type": "range",
            "bounds": [0.0, 1.0],
            "value_type": "float",
            "unit": "fraction",
        },
        {
            "name": "excipient_filler",
            "type": "range",
            "bounds": [0.0, 1.0],
            "value_type": "float",
            "unit": "fraction",
        },
        {
            "name": "pH",
            "type": "range",
            "bounds": [3.0, 7.0],
            "value_type": "float",
            "unit": "pH",
        },
        {
            "name": "storage_temperature_c",
            "type": "range",
            "bounds": [15.0, 30.0],
            "value_type": "float",
            "unit": "Celsius",
        },
    ],
    parameter_constraints=[
        # Sum(e1..e4) <= 1 ensures e5 = 1 - Sum(e1..e4) is in [0,1]
        "excipient_polymer_binder + excipient_surfactant + excipient_disintegrant + excipient_filler <= 1.0"
    ],
    objectives={
        BIOAVAILABILITY: ObjectiveProperties(minimize=False),  # maximize bioavailability (%)
        SHELF_LIFE: ObjectiveProperties(minimize=False),       # maximize shelf life (months)
    },
)

# Budget: 50 experiments
N_TRIALS = 50

for _ in range(N_TRIALS):
    parameters, trial_index = ax_client.get_next_trial()

    e_binder = parameters["excipient_polymer_binder"]
    e_surf = parameters["excipient_surfactant"]
    e_dis = parameters["excipient_disintegrant"]
    e_fill = parameters["excipient_filler"]
    # Composition closure to compute the 5th excipient
    e5_antioxidant = float(1.0 - (e_binder + e_surf + e_dis + e_fill))

    # Ensure small numerical errors don't lead outside [0,1]
    e5_antioxidant = float(np.clip(e5_antioxidant, 0.0, 1.0))

    pH = parameters["pH"]
    storage_T = parameters["storage_temperature_c"]

    results = evaluate_formulation(
        excipient_polymer_binder=e_binder,
        excipient_surfactant=e_surf,
        excipient_disintegrant=e_dis,
        excipient_filler=e_fill,
        excipient_antioxidant_stabilizer=e5_antioxidant,
        pH=pH,
        storage_temperature_c=storage_T,
    )
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

# Retrieve observed data
df = ax_client.get_trials_data_frame()

# Compute empirical Pareto frontier from observed outcomes (maximize both)
def pareto_front(df_in: pd.DataFrame, x_col: str, y_col: str) -> pd.DataFrame:
    pts = df_in[[x_col, y_col]].values
    keep_idx = []
    for i, p in enumerate(pts):
        dominated = False
        for j, q in enumerate(pts):
            if i == j:
                continue
            if (q[0] >= p[0] and q[1] >= p[1]) and (q[0] > p[0] or q[1] > p[1]):
                dominated = True
                break
        if not dominated:
            keep_idx.append(i)
    pf = df_in.iloc[keep_idx].drop_duplicates(subset=[x_col, y_col])
    return pf.sort_values(by=x_col)

pareto_df = pareto_front(df, BIOAVAILABILITY, SHELF_LIFE)

# Plot results
fig, ax = plt.subplots(figsize=(7, 5), dpi=150)
ax.scatter(df[BIOAVAILABILITY], df[SHELF_LIFE], fc="None", ec="k", label="Observed")
ax.plot(
    pareto_df[BIOAVAILABILITY],
    pareto_df[SHELF_LIFE],
    color="#0033FF",
    lw=2,
    label="Pareto Front (observed)",
)
ax.set_xlabel("Bioavailability (%)")
ax.set_ylabel("Shelf life (months)")
ax.set_title("Observed Pareto frontier: drug formulation")
ax.legend()
plt.tight_layout()
plt.show()