# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Problem: Multi-objective optimization of Fe-Cr-Ni-Mo alloy composition.
# Parameters (wt%): Cr [10, 20], Ni [5, 15], Mo [1, 5]; Fe is balance.
# Objectives:
#   - tensile_strength (MPa): maximize
#   - corrosion_rate (mpy): minimize
# Constraint: Cr + Ni + Mo <= 100 (Fe is balance)
# Budget: 40 trials


RNG = np.random.default_rng(12345)

tensile_strength_metric = "tensile_strength"  # MPa
corrosion_rate_metric = "corrosion_rate"      # mpy (lower is better)


def evaluate_alloy(Cr: float, Ni: float, Mo: float) -> dict:
    """
    Synthetic but physically-inspired evaluation of an Fe-Cr-Ni-Mo alloy.

    Returns a dict with:
      - tensile_strength: MPa (higher is better)
      - corrosion_rate: mpy (mils per year, lower is better)

    Notes:
    - This stub emulates realistic trends seen in stainless steels:
        * Cr and Mo improve corrosion resistance strongly, Ni moderately.
        * Tensile strength grows with alloying and exhibits optima near
          common stainless ranges (Cr ~18, Ni ~10, Mo ~3).
        * Very high Mo can encourage sigma phase (modeled as penalties).
    - Random noise is added to mimic experimental variability.
    """
    total_alloying = Cr + Ni + Mo  # Fe is balance: Fe = 100 - total_alloying

    # Tensile strength model (MPa): base + linear + local optima + interactions + penalties
    base_strength = 420.0
    linear_strength = 16.0 * Cr + 12.0 * Ni + 24.0 * Mo

    # Gaussian "sweet spots" near common stainless compositions
    gauss_Cr = 110.0 * np.exp(-0.5 * ((Cr - 18.0) / 2.2) ** 2)
    gauss_Ni = 80.0 * np.exp(-0.5 * ((Ni - 10.0) / 3.0) ** 2)
    gauss_Mo = 70.0 * np.exp(-0.5 * ((Mo - 3.0) / 0.8) ** 2)

    # Mild interaction (solid solution + precipitation strengthening interplay)
    interaction = 0.7 * Ni * Mo + 0.25 * Cr * Mo

    # Penalties for off-target chemistry and sigma-phase risk at very high Mo
    total_penalty = -0.12 * (total_alloying - 35.0) ** 2
    sigma_penalty = -22.0 * max(0.0, Mo - 4.5) ** 2

    # Aggregate tensile strength
    tensile_strength = (
        base_strength
        + linear_strength
        + gauss_Cr
        + gauss_Ni
        + gauss_Mo
        + interaction
        + total_penalty
        + sigma_penalty
    )

    # Add measurement noise (MPa)
    tensile_strength += RNG.normal(0.0, 12.0)

    # Keep within plausible range
    tensile_strength = float(np.clip(tensile_strength, 300.0, 1600.0))

    # Corrosion rate model (mpy): lower is better
    # Strong exponential reduction with Cr and Mo, moderate with Ni.
    base_rate = 14.0
    cr_factor = np.exp(-0.22 * (Cr - 12.0))
    ni_factor = 1.0 / (1.0 + 0.11 * Ni)
    mo_factor = np.exp(-0.45 * (Mo - 1.0))

    corrosion_rate = base_rate * cr_factor * ni_factor * mo_factor

    # Slight penalty if chemistry deviates from typical "stainless window"
    # (e.g., very low Cr or Mo increases rate).
    window_penalty = 0.0
    if Cr < 12.5:
        window_penalty += 2.0 * (12.5 - Cr)
    if Mo < 1.5:
        window_penalty += 1.5 * (1.5 - Mo)

    # Sigma-phase risk may harm corrosion resistance as well
    if Mo > 4.5 and Cr > 19.0:
        corrosion_rate *= 1.2

    corrosion_rate += window_penalty

    # Multiplicative measurement noise
    corrosion_rate *= float(np.exp(RNG.normal(0.0, 0.06)))

    # Keep within plausible range
    corrosion_rate = float(np.clip(corrosion_rate, 0.02, 20.0))

    return {
        tensile_strength_metric: tensile_strength,
        corrosion_rate_metric: corrosion_rate,
    }


ax_client = AxClient(random_seed=12345)

# Provide objective thresholds (reference point) for EHVI.
# Choose conservative values so most reasonable solutions dominate the ref point:
# - tensile_strength (maximize): reference (threshold) set low (e.g., 500 MPa)
# - corrosion_rate (minimize): reference set high (e.g., 12 mpy)
ax_client.create_experiment(
    name="fe_cr_ni_mo_multiobjective",
    parameters=[
        {"name": "Cr", "type": "range", "bounds": [10.0, 20.0]},
        {"name": "Ni", "type": "range", "bounds": [5.0, 15.0]},
        {"name": "Mo", "type": "range", "bounds": [1.0, 5.0]},
    ],
    objectives={
        tensile_strength_metric: ObjectiveProperties(minimize=False, threshold=500.0),
        corrosion_rate_metric: ObjectiveProperties(minimize=True, threshold=12.0),
    },
    parameter_constraints=[
        "Cr + Ni + Mo <= 100.0",
    ],
    immutable_search_space_and_opt_config=False,
)

# Optimization budget
num_trials = 40

for _ in range(num_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    Cr = float(parameterization["Cr"])
    Ni = float(parameterization["Ni"])
    Mo = float(parameterization["Mo"])

    results = evaluate_alloy(Cr=Cr, Ni=Ni, Mo=Mo)

    # Report observed data (noisy)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

# Retrieve Pareto-optimal arms based on observed outcomes
pareto = ax_client.get_pareto_optimal_parameters(use_model_predictions=False)

# Tabulate observed trials
df = ax_client.get_trials_data_frame()

# Build Pareto front DataFrame from observed values
pareto_points = []
for _, (params, metrics) in pareto.items():
    ts = metrics[tensile_strength_metric][0]
    cr = metrics[corrosion_rate_metric][0]
    pareto_points.append({tensile_strength_metric: ts, corrosion_rate_metric: cr})
pareto_df = pd.DataFrame(pareto_points).sort_values(tensile_strength_metric)

# Plot results: tensile_strength (x, maximize) vs corrosion_rate (y, minimize)
fig, ax = plt.subplots(figsize=(7, 5), dpi=150)

ax.scatter(
    df[tensile_strength_metric],
    df[corrosion_rate_metric],
    fc="None",
    ec="k",
    label="Observed",
)

ax.plot(
    pareto_df[tensile_strength_metric],
    pareto_df[corrosion_rate_metric],
    color="#0033FF",
    lw=2,
    label="Pareto Front",
)

ax.set_xlabel(f"{tensile_strength_metric} (MPa)")
ax.set_ylabel(f"{corrosion_rate_metric} (mpy)")
ax.set_title("Fe-Cr-Ni-Mo Alloy: Observed Outcomes and Pareto Front")
ax.legend()

plt.tight_layout()
plt.show()