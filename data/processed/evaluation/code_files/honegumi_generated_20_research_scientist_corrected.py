# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# LED Thermal Management Optimization using Ax
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from typing import Dict
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Reproducibility for the synthetic evaluation noise
rng = np.random.default_rng(2025)


def evaluate_led_thermal(heat_sink_area: float, thermal_paste_thickness: float) -> Dict[str, float]:
    """
    Compute the LED junction temperature (°C) for a given thermal design.

    Parameters
    - heat_sink_area: Base heat sink area in mm² (contact and fin base footprint). Range [100, 500].
    - thermal_paste_thickness: Thermal interface material (TIM) thickness in μm. Range [50, 200].

    Model Description (synthetic but physically motivated):
    - LED dissipated power P (W) produces temperature rise ΔT = P * R_total.
    - R_total = R_jc + R_interface + R_convection + R_misc.
      * R_jc: Junction-to-case, constant for a given LED package.
      * R_interface: TIM resistance, t / (k_eff * A_base). k_eff degrades for very thin TIM due to coverage/voids.
      * R_convection: 1 / (h_eff * A_fin_eff), where A_fin_eff = multiplier * A_base to reflect fin area.
      * R_misc: Residual path resistances (e.g., spreading, contact non-idealities).
    - Ambient temperature is set to 25 °C.
    - A small Gaussian noise is added to emulate measurement noise.

    Returns
    - {"junction_temperature": float} in °C
    """
    # Constants
    ambient_c = 25.0  # °C
    power_w = 6.0  # W, representative LED thermal load
    r_jc_kw = 5.0  # K/W, typical LED package
    r_misc_kw = 0.5  # K/W, spreading and other residuals

    # Unit conversions
    area_base_m2 = heat_sink_area * 1e-6  # mm² -> m²
    t_tim_m = thermal_paste_thickness * 1e-6  # μm -> m

    # Effective fin area multiplier to reflect fins beyond base footprint
    fin_area_multiplier = 120.0
    a_fin_eff_m2 = fin_area_multiplier * area_base_m2

    # Convection model
    h_eff_w_m2k = 28.0  # W/(m²·K), natural convection effective average
    r_conv_kw = 1.0 / max(h_eff_w_m2k * a_fin_eff_m2, 1e-9)

    # TIM effective conductivity with coverage penalty for very thin layers
    k_tim_w_mk = 3.0  # W/(m·K), nominal paste conductivity
    coverage_factor = (t_tim_m / 80e-6) ** 0.5  # <1 if t < 80 μm
    coverage_factor = float(np.clip(coverage_factor, 0.4, 1.0))
    k_eff = k_tim_w_mk * coverage_factor
    r_interface_kw = t_tim_m / max(k_eff * area_base_m2, 1e-12)

    # Total thermal resistance and junction temperature
    r_total_kw = r_jc_kw + r_interface_kw + r_conv_kw + r_misc_kw
    tj_c = ambient_c + power_w * r_total_kw

    # Add small measurement noise
    tj_c_noisy = tj_c + rng.normal(0.0, 0.5)

    return {"junction_temperature": float(tj_c_noisy)}


# Configure Ax optimization client
ax_client = AxClient()

ax_client.create_experiment(
    name="led_thermal_optimization",
    parameters=[
        {
            "name": "heat_sink_area",
            "type": "range",
            "bounds": [100.0, 500.0],  # mm²
        },
        {
            "name": "thermal_paste_thickness",
            "type": "range",
            "bounds": [50.0, 200.0],  # μm
        },
    ],
    objectives={
        "junction_temperature": ObjectiveProperties(minimize=True),
    },
)

# Budget: 28 trials
n_trials = 28
for _ in range(n_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    area_mm2 = float(parameterization["heat_sink_area"])
    tim_thickness_um = float(parameterization["thermal_paste_thickness"])

    # Evaluate experiment (synthetic model in place of physical test)
    results = evaluate_led_thermal(area_mm2, tim_thickness_um)

    # Report result for the single objective
    ax_client.complete_trial(trial_index=trial_index, raw_data=results["junction_temperature"])

# Retrieve best found parameters and metrics
best_parameters, best_values = ax_client.get_best_parameters()
best_metric_name = ax_client.objective_names[0]
best_value = best_values[best_metric_name]["value"]

print("Best parameters found:")
for k, v in best_parameters.items():
    print(f"  {k}: {v:.4f}")
print(f"Best {best_metric_name}: {best_value:.4f} °C")

# Plot results
df = ax_client.get_trials_data_frame()
metric_name = ax_client.objective_names[0]
y = df[metric_name].values
x = np.arange(len(y))
cum_best = np.minimum.accumulate(y)

fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
ax.scatter(x, y, ec="k", fc="none", label="Observed")
ax.plot(x, cum_best, color="#0033FF", lw=2, label="Best so far")
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{metric_name} (°C)")
ax.set_title("LED Junction Temperature Optimization")
ax.grid(True, alpha=0.3)
ax.legend()
plt.tight_layout()
plt.show()