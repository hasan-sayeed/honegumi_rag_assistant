# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# Generated by adapting a Honegumi skeleton for fermentation optimization
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from typing import Dict, Tuple
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Optimization target: maximize protein yield (g/L)
objective_name = "protein_yield"


def evaluate_fermentation_batch(
    temperature_celsius: float,
    pH: float,
    agitation_rpm: float,
    rng: np.random.Generator,
) -> Dict[str, Tuple[float, float]]:
    """
    Simulate a fermentation run and return measured protein yield and SEM.

    This evaluation models plausible biological responses:
    - Temperature response peaks near 33°C with a Gaussian tolerance.
    - pH response peaks near 7.0 with a narrower Gaussian tolerance.
    - Agitation influences oxygen transfer and shear: broad optimum near ~270 rpm.

    The measured yield includes stochastic measurement/process noise and returns
    (mean, sem) for the objective as expected by Ax.

    Returns:
        { "protein_yield": (measured_yield_g_per_L, standard_error) }
    """
    # Bioprocess response surfaces (all smooth and bounded)
    max_yield = 30.0  # g/L, theoretical maximum in this setup

    # Temperature effect: optimum ~33°C, tolerance ~3.0°C
    t_opt, t_sigma = 33.0, 3.0
    temp_effect = np.exp(-0.5 * ((temperature_celsius - t_opt) / t_sigma) ** 2)

    # pH effect: optimum ~7.0, tolerance ~0.35 pH units
    ph_opt, ph_sigma = 7.0, 0.35
    ph_effect = np.exp(-0.5 * ((pH - ph_opt) / ph_sigma) ** 2)

    # Agitation effect: broad optimum around ~270 rpm, tolerance ~90 rpm
    ag_opt, ag_sigma = 270.0, 90.0
    ag_effect = np.exp(-0.5 * ((agitation_rpm - ag_opt) / ag_sigma) ** 2)

    # Mild interaction: if temperature is high, agitation benefits more (oxygen demand)
    interaction = 1.0 + 0.1 * max(0.0, (temperature_celsius - t_opt) / 6.0)

    # Combine effects multiplicatively and cap
    true_yield = max_yield * temp_effect * ph_effect * ag_effect * interaction
    true_yield = float(np.clip(true_yield, 0.0, max_yield))

    # Measurement/process noise: heteroscedastic (scales mildly with yield)
    sem = 0.4 + 0.03 * true_yield  # standard error of measurement
    measured_yield = float(true_yield + rng.normal(0.0, sem))

    # Ensure physical realism (non-negative)
    measured_yield = float(max(0.0, measured_yield))

    return {objective_name: (measured_yield, sem)}


def main():
    rng = np.random.default_rng(seed=20251031)

    ax_client = AxClient()

    ax_client.create_experiment(
        name="fermentation_protein_yield_optimization",
        parameters=[
            {"name": "temperature_celsius", "type": "range", "bounds": [25.0, 37.0]},
            {"name": "pH", "type": "range", "bounds": [6.0, 8.0]},
            {"name": "agitation_rpm", "type": "range", "bounds": [100.0, 400.0]},
        ],
        objectives={
            objective_name: ObjectiveProperties(minimize=False),
        },
    )

    total_trials = 30
    for _ in range(total_trials):
        parameterization, trial_index = ax_client.get_next_trial()

        # Extract parameters
        temperature_celsius = float(parameterization["temperature_celsius"])
        pH_value = float(parameterization["pH"])
        agitation_rpm = float(parameterization["agitation_rpm"])

        # Run the simulated fermentation evaluation
        results = evaluate_fermentation_batch(
            temperature_celsius=temperature_celsius,
            pH=pH_value,
            agitation_rpm=agitation_rpm,
            rng=rng,
        )

        # Report results to Ax (include SEM to indicate noise)
        ax_client.complete_trial(trial_index=trial_index, raw_data=results)

    best_parameters, best_metrics = ax_client.get_best_parameters()

    # Print best found settings and corresponding predicted outcome
    print("Best parameters found:")
    for k, v in best_parameters.items():
        print(f"  {k}: {v}")
    print("\nBest observed/predicted protein yield metric:")
    print(best_metrics)

    # Plot results
    df = ax_client.get_trials_data_frame()
    if not df.empty:
        obj_df = df[df["metric_name"] == objective_name].copy()
        obj_df = obj_df.sort_values("trial_index")
        x = obj_df["trial_index"].to_numpy()
        y = obj_df["mean"].to_numpy()

        fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
        ax.scatter(x, y, ec="k", fc="none", label="Observed yield (g/L)")
        ax.plot(x, np.maximum.accumulate(y), color="#0033FF", lw=2, label="Best to trial")
        ax.set_xlabel("Trial number")
        ax.set_ylabel("Protein yield (g/L)")
        ax.set_title("Fermentation optimization: protein yield over trials")
        ax.legend()
        plt.tight_layout()
        plt.show()


if __name__ == "__main__":
    main()