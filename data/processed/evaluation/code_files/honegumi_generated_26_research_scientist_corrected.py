# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# Generated for composite cure optimization with Ax Platform
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain-specific objective name
objective_name = "tensile_strength_mpa"

# Reproducible randomness for simulated measurement noise
_rng = np.random.default_rng(2025)


def measure_tensile_strength_mpa(cure_temperature_c: float, cure_time_h: float) -> float:
    """
    Simulated tensile strength (MPa) for a thermoset composite as a function of cure temperature and time.

    This function provides a smooth, physically plausible response surface with:
    - An optimal cure "window" centered around ~160°C and ~5.5 h
    - Penalties for undercure (low temperature/time) and overcure/thermal degradation (high temperature/long time)
    - Additive Gaussian noise to emulate specimen-to-specimen testing variability

    Replace this with actual mechanical testing measurements in a lab setting.
    """
    # Optimal region parameters (heuristic)
    t_opt_c = 160.0
    time_opt_h = 5.5

    # Spread around optimum (temperature in °C, time in log-hours space)
    sigma_t_c = 12.0
    sigma_logt = 0.25

    # Peak contribution around the optimum
    peak = 650.0 * np.exp(
        -0.5 * ((cure_temperature_c - t_opt_c) / sigma_t_c) ** 2
        - 0.5 * ((np.log(cure_time_h) - np.log(time_opt_h)) / sigma_logt) ** 2
    )

    # Baseline strength
    baseline = 300.0

    # Degradation at high temperatures and long times
    high_t_excess = max(cure_temperature_c - 170.0, 0.0)
    long_time_excess = max(cure_time_h - 7.0, 0.0)
    degrade_high_t = 0.0009 * (high_t_excess**2) * (1.0 + 0.15 * (cure_time_h - 5.0))
    degrade_long_time = 15.0 * (long_time_excess**2)

    # Undercure penalties at very low time/temperature
    under_time_excess = max(2.5 - cure_time_h, 0.0)
    under_temp_excess = max(130.0 - cure_temperature_c, 0.0)
    undercure_penalty = 0.02 * (120.0 * (under_time_excess**2) + 0.5 * (under_temp_excess**2))

    # Combine contributions
    strength = baseline + peak - degrade_high_t - degrade_long_time - undercure_penalty

    # Additive measurement noise (typical variability 10–20 MPa)
    noise = _rng.normal(loc=0.0, scale=12.0)
    strength_noisy = float(np.clip(strength + noise, 100.0, 1200.0))

    return strength_noisy


# Initialize Ax client and define experiment
ax_client = AxClient()
ax_client.create_experiment(
    name="composite_cure_optimization",
    parameters=[
        {"name": "cure_temperature_c", "type": "range", "bounds": [120.0, 180.0]},
        {"name": "cure_time_h", "type": "range", "bounds": [2.0, 8.0]},
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
)

# Budget: 22 trials (specimens)
for _ in range(22):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters for the curing process
    cure_temperature_c = float(parameterization["cure_temperature_c"])
    cure_time_h = float(parameterization["cure_time_h"])

    # Evaluate (simulate measurement of tensile strength)
    try:
        strength_mpa = measure_tensile_strength_mpa(cure_temperature_c, cure_time_h)
        # For noisy measurements with unknown noise, pass the scalar. Ax will infer noise.
        ax_client.complete_trial(trial_index=trial_index, raw_data=strength_mpa)
    except Exception as e:
        # Mark trial as failed to allow Ax to continue
        ax_client.log_trial_failure(trial_index=trial_index)
        print(f"Trial {trial_index} failed during evaluation: {e}")

# Retrieve best found parameters and the corresponding objective value
best_parameters, best_values = ax_client.get_best_parameters()

print("Best cure parameters found:")
print(best_parameters)
print("Best observed outcomes:")
print(best_values)

# Plot results across trials
objective = ax_client.objective_names[0]
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objective], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.maximum.accumulate(df[objective]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel("Tensile Strength (MPa)")
ax.set_title("Composite Cure Optimization: Tensile Strength over Trials")
ax.legend()
plt.tight_layout()
plt.show()