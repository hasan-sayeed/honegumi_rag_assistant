# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from typing import Dict, Tuple
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Domain: Bioreactor optimization for protein expression
# Objective: Maximize volumetric productivity (g/L)
objective_metric_name = "volumetric_productivity_g_per_L"

# Random generator for reproducible stochastic noise (replicate sampling)
rng = np.random.default_rng(2025)
replicates_per_trial = 3  # Adjust to control number of experimental replicates per trial


def run_bioreactor_experiment(
    temperature_celsius: float,
    pH: float,
    agitation_rate_rpm: float,
    replicates: int = 3,
) -> Dict[str, Tuple[float, float]]:
    """
    Simulate a bioreactor run and return mean and SEM for volumetric productivity.

    This function is a realistic stub for an experimental evaluation:
    - It models a smooth optimum around process-relevant setpoints.
    - Adds measurement/process noise and computes the SEM across replicates.
    - Replace this with actual lab automation, data acquisition, or simulation calls.

    Args:
        temperature_celsius: Reactor temperature in °C.
        pH: Culture pH.
        agitation_rate_rpm: Agitation speed in rpm.
        replicates: Number of replicate measurements for the same condition.

    Returns:
        Dict mapping metric name to (mean, SEM).
    """
    # Biologicaly plausible optima and widths (organism/process dependent)
    T_opt = 32.0      # °C
    pH_opt = 7.0      # pH
    rpm_opt = 250.0   # rpm

    # Sensitivity (spread) around optima
    T_width = 3.0     # wider = less sensitive
    pH_width = 0.4
    rpm_width = 70.0

    # Peak productivity at optimum (g/L); adjust to your system
    peak_prod = 3.0

    # Core response: 3D Gaussian around the optimum
    gaussian_core = np.exp(
        -((temperature_celsius - T_opt) / T_width) ** 2
        - ((pH - pH_opt) / pH_width) ** 2
        - ((agitation_rate_rpm - rpm_opt) / rpm_width) ** 2
    )

    # Mild oxygen transfer saturation with agitation (monotonically increasing, saturating)
    kla_saturation = 1.0 - np.exp(-max(agitation_rate_rpm, 0.0) / 140.0)

    # Combine effects, ensure nonnegativity
    true_productivity = max(0.0, peak_prod * gaussian_core * (0.7 + 0.3 * kla_saturation))

    # Noise model: process + measurement noise (heteroscedastic)
    sigma = 0.08 + 0.06 * true_productivity  # g/L
    observations = []
    for _ in range(max(1, replicates)):
        obs = true_productivity + rng.normal(0.0, sigma)
        observations.append(max(0.0, float(obs)))  # productivity cannot be negative

    mean_val = float(np.mean(observations))
    if len(observations) > 1:
        sem_val = float(np.std(observations, ddof=1) / np.sqrt(len(observations)))
    else:
        sem_val = float(sigma)  # conservative if no replicates

    return {objective_metric_name: (mean_val, sem_val)}


ax_client = AxClient()

ax_client.create_experiment(
    name="bioreactor_protein_expression_optimization",
    parameters=[
        {
            "name": "temperature_celsius",
            "type": "range",
            "bounds": [25.0, 37.0],
            "value_type": "float",
        },
        {
            "name": "pH",
            "type": "range",
            "bounds": [6.0, 8.0],
            "value_type": "float",
        },
        {
            "name": "agitation_rate_rpm",
            "type": "range",
            "bounds": [100.0, 400.0],
            "value_type": "float",
        },
    ],
    objectives={objective_metric_name: ObjectiveProperties(minimize=False)},
)

# Optimization budget: 30 trials (each trial uses replicate sampling in evaluation)
N_TRIALS = 30
for _ in range(N_TRIALS):
    parameterization, trial_index = ax_client.get_next_trial()

    temperature_celsius = float(parameterization["temperature_celsius"])
    pH_value = float(parameterization["pH"])
    agitation_rate_rpm = float(parameterization["agitation_rate_rpm"])

    results = run_bioreactor_experiment(
        temperature_celsius=temperature_celsius,
        pH=pH_value,
        agitation_rate_rpm=agitation_rate_rpm,
        replicates=replicates_per_trial,
    )
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, best_metrics = ax_client.get_best_parameters()
best_mean = best_metrics[objective_metric_name]["mean"]
best_sem = best_metrics[objective_metric_name]["sem"]

print("Best parameters found:")
for k, v in best_parameters.items():
    print(f"  {k}: {v:.4g}")
print(
    f"Best {objective_metric_name}: mean={best_mean:.4f} g/L, SEM={best_sem:.4f} g/L"
)

# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(7, 4.5), dpi=150)
ax.scatter(df.index, df[objectives[0]], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.maximum.accumulate(df[objectives[0]]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{objectives[0]} (g/L)")
ax.set_title("Bioreactor Optimization: Volumetric Productivity over Trials")
ax.grid(alpha=0.3)
ax.legend()
plt.tight_layout()
plt.show()