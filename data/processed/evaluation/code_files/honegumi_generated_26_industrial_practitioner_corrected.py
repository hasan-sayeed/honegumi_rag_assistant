# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


np.random.seed(42)


tensile_strength_name = "tensile_strength_mpa"


def evaluate_cure_cycle(cure_temperature_c: float, cure_time_h: float) -> float:
    """
    Simulate tensile strength (MPa) of a composite laminate coupon as a function of
    cure temperature (°C) and cure time (hours).

    Model components:
    - Degree of cure: alpha = 1 - exp(-k(T) * t_hours)
      with temperature-dependent rate k(T) = 10 ** (a + b * (T - 140)),
      where a=-0.5, b=0.02 (per °C), yielding plausible cure kinetics.
    - Strength increases with degree of cure and saturates: S_cure = S_max * alpha**p
      with S_max = 1000 MPa, p = 0.6.
    - Over-cure/thermal degradation penalties for high temperature and very long times.

    Adds Gaussian measurement noise (~12 MPa std) to mimic panel-to-panel variability.
    """
    # Cure kinetics parameters
    a = -0.5  # log10 rate at 140°C
    b = 0.02  # sensitivity of log10 rate to temperature (per °C)

    # Compute cure rate (per hour) and degree of cure
    k_per_hour = 10 ** (a + b * (cure_temperature_c - 140.0))
    k_per_hour = max(k_per_hour, 1e-4)  # avoid extremely small/negative rates
    degree_of_cure = 1.0 - np.exp(-k_per_hour * max(cure_time_h, 0.0))
    degree_of_cure = float(np.clip(degree_of_cure, 0.0, 1.0))

    # Strength vs. degree of cure
    S_max = 1000.0  # MPa, representative fully cured tensile strength
    p = 0.6
    strength_from_cure = S_max * (degree_of_cure ** p)

    # Degradation penalties
    temp_over = max(0.0, cure_temperature_c - 165.0)
    penalty_temp = 0.25 * (temp_over ** 2)  # MPa; quadratic penalty above ~165°C

    time_over = max(0.0, cure_time_h - 6.0)
    penalty_time = 15.0 * (time_over ** 1.5)  # MPa; superlinear penalty for very long cure

    strength = strength_from_cure - penalty_temp - penalty_time

    # Measurement noise (panel variability, testing scatter)
    noise = np.random.normal(loc=0.0, scale=12.0)
    measured_strength = float(np.clip(strength + noise, 0.0, None))

    return measured_strength


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "cure_temperature_c", "type": "range", "bounds": [120.0, 180.0]},
        {"name": "cure_time_h", "type": "range", "bounds": [2.0, 8.0]},
    ],
    objectives={
        tensile_strength_name: ObjectiveProperties(minimize=False),
    },
)


num_trials = 22  # budget: 22 panels

for i in range(num_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    cure_temperature_c = float(parameterization["cure_temperature_c"])
    cure_time_h = float(parameterization["cure_time_h"])

    try:
        result = evaluate_cure_cycle(cure_temperature_c, cure_time_h)
        ax_client.complete_trial(trial_index=trial_index, raw_data=result)
    except Exception as e:
        ax_client.log_trial_failure(trial_index=trial_index)

best_parameters, metrics = ax_client.get_best_parameters()
best_strength = metrics[tensile_strength_name]["mean"]
print("Best cure cycle found:")
print(best_parameters)
print(f"Estimated tensile strength (MPa): {best_strength:.2f}")

# Plot results
objective_names = ax_client.objective_names
df = ax_client.get_trials_data_frame()

y = df[objective_names[0]].astype(float).values
x = np.arange(len(y))
cum_best = np.maximum.accumulate(y)

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(x, y, ec="k", fc="none", label="Observed")
ax.plot(x, cum_best, color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel("Tensile Strength (MPa)")
ax.set_title("Composite Cure Cycle Optimization")
ax.legend()
plt.tight_layout()
plt.show()