# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt

from ax.modelbridge.factory import Models
from ax.modelbridge.generation_strategy import GenerationStep, GenerationStrategy

from ax.modelbridge.registry import Specified_Task_ST_MTGP_trans
from ax.core.observation import ObservationFeatures

objective_name = "green_strength_mpa"

rng = np.random.default_rng(2025)


def simulate_green_strength(
    binder_concentration_wt_pct: float,
    plasticizer_wt_pct: float,
    dispersant_wt_pct: float,
    ceramic_system: str,
) -> float:
    """
    Synthetic but plausible green strength model (MPa) for ceramic feedstocks.
    Captures system-specific optima, nonlinear effects, and moderate observation noise.
    """
    # Task-specific baseline strengths and optima
    system_params = {
        "alumina": {
            "base": 5.5,
            "binder_opt": 5.5,
            "binder_scale": 0.55,
            "plasticizer_opt": 1.0,
            "dispersant_opt": 0.5,
        },
        "zirconia": {
            "base": 6.2,
            "binder_opt": 6.2,
            "binder_scale": 0.6,
            "plasticizer_opt": 0.9,
            "dispersant_opt": 0.45,
        },
        "sic": {
            "base": 4.8,
            "binder_opt": 4.5,
            "binder_scale": 0.5,
            "plasticizer_opt": 1.2,
            "dispersant_opt": 0.55,
        },
    }

    p = system_params[ceramic_system]

    # Binder: quadratic peak around system-specific optimum (in wt%)
    binder_dev = binder_concentration_wt_pct - p["binder_opt"]
    binder_effect = -0.22 * (binder_dev / p["binder_scale"]) ** 2 + 1.0

    # Plasticizer: mild quadratic peak around ~1 wt%
    plast_dev = plasticizer_wt_pct - p["plasticizer_opt"]
    plasticizer_effect = -0.15 * (plast_dev / 0.8) ** 2 + 0.2

    # Dispersant: sharper optimum near ~0.5 wt%
    disp_dev = dispersant_wt_pct - p["dispersant_opt"]
    dispersant_effect = -0.35 * (disp_dev / 0.25) ** 2 + 0.6

    # Simple interaction: good dispersant allows slightly lower binder for same strength
    interaction = 0.05 * (0.55 - abs(disp_dev)) * (0.4 - abs(binder_dev) / 10.0)

    # Aggregate base + effects; ensure non-negative
    mean_strength = p["base"] + binder_effect + plasticizer_effect + dispersant_effect + interaction

    # Slight penalties at boundaries to discourage edge solutions
    edge_penalty = 0.0
    if binder_concentration_wt_pct in (1.0, 10.0):
        edge_penalty -= 0.15
    if plasticizer_wt_pct in (0.0, 3.0):
        edge_penalty -= 0.1
    if dispersant_wt_pct in (0.1, 1.0):
        edge_penalty -= 0.1

    mean_strength += edge_penalty

    # Add realistic observation noise (heteroscedastic mild)
    noise_sd = 0.20 + 0.03 * abs(binder_dev) + 0.02 * abs(plast_dev) + 0.02 * abs(disp_dev)
    observed_strength = max(0.0, mean_strength + rng.normal(0.0, noise_sd))
    return float(observed_strength)


gs = GenerationStrategy(
    steps=[
        GenerationStep(
            model=Models.SOBOL,
            num_trials=18,  # ~6 init points per ceramic system
            min_trials_observed=12,
            max_parallelism=9,
            model_kwargs={"seed": 123, "transforms": Specified_Task_ST_MTGP_trans},
            model_gen_kwargs={"deduplicate": True},
        ),
        GenerationStep(
            model=Models.BOTORCH_MODULAR,
            num_trials=-1,
            max_parallelism=6,
            model_kwargs={"transforms": Specified_Task_ST_MTGP_trans},
        ),
    ]
)

ax_client = AxClient(generation_strategy=gs)

ax_client.create_experiment(
    name="ceramic_binder_optimization",
    parameters=[
        {
            "name": "binder_concentration_wt_pct",
            "type": "range",
            "bounds": [1.0, 10.0],
            "value_type": "float",
        },
        {
            "name": "plasticizer_wt_pct",
            "type": "range",
            "bounds": [0.0, 3.0],
            "value_type": "float",
        },
        {
            "name": "dispersant_wt_pct",
            "type": "range",
            "bounds": [0.1, 1.0],
            "value_type": "float",
        },
        {
            "name": "ceramic_system",
            "type": "choice",
            "values": ["alumina", "zirconia", "sic"],
            "is_task": True,
            "target_value": "alumina",
        },
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
)

# Round-robin scheduling across ceramic systems to allocate ~40 trials each (total 120)
systems = ["alumina", "zirconia", "sic"]
total_trials = 120

for i in range(total_trials):
    system = systems[i % len(systems)]
    parameterization, trial_index = ax_client.get_next_trial(
        fixed_features=ObservationFeatures({"ceramic_system": system})
    )

    binder = parameterization["binder_concentration_wt_pct"]
    plasticizer = parameterization["plasticizer_wt_pct"]
    dispersant = parameterization["dispersant_wt_pct"]

    strength = simulate_green_strength(binder, plasticizer, dispersant, system)
    ax_client.complete_trial(trial_index=trial_index, raw_data=strength)

# Collect and display best observed parameters per ceramic system
df = ax_client.get_trials_data_frame()
param_cols = ["binder_concentration_wt_pct", "plasticizer_wt_pct", "dispersant_wt_pct"]

best_rows = []
for sys in systems:
    df_sys = df[df.ceramic_system == sys].copy()
    if len(df_sys) == 0:
        continue
    idx_max = df_sys[objective_name].idxmax()
    row = df_sys.loc[idx_max, ["ceramic_system", objective_name] + param_cols]
    best_rows.append(row)

if best_rows:
    best_df = pd.DataFrame(best_rows)
    print("Best observed parameters per ceramic system:")
    print(best_df.to_string(index=False))
else:
    print("No completed trials to summarize.")

# Plot optimization traces per system (observed best-so-far)
fig, axes = plt.subplots(1, 3, figsize=(12, 3.5), dpi=140, sharey=True)
for ax, sys in zip(axes, systems):
    df_sys = df[df.ceramic_system == sys].copy()
    df_sys = df_sys.sort_values("trial_index")
    y = df_sys[objective_name].values if len(df_sys) > 0 else np.array([])
    if y.size > 0:
        x = np.arange(1, len(y) + 1)
        ax.scatter(x, y, ec="k", fc="none", label="Observed")
        ax.plot(x, np.maximum.accumulate(y), color="#0033FF", lw=2, label="Best to Trial")
    ax.set_title(f"{sys.capitalize()}")
    ax.set_xlabel("Trials on this system")
    ax.grid(True, alpha=0.2)

axes[0].set_ylabel("Green strength (MPa)")
axes[-1].legend(loc="lower right")
fig.suptitle("Green strength optimization traces by ceramic system", y=1.03)
plt.tight_layout()
plt.show()