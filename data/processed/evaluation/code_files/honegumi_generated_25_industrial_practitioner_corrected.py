# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# Generated by adapting Honegumi skeleton to fermentation medium optimization
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


objective_name = "biomass_yield"  # g/L


def evaluate_fermentation(glucose_g_per_L: float, nitrogen_g_per_L: float, phosphate_g_per_L: float) -> dict:
    """
    Simulated evaluation of biomass yield (g/L) for a fermentation medium.

    This stub models:
    - Stoichiometric limitation by C, N, and P using simple yield coefficients.
    - Inhibition at excessively high concentrations.
    - Sensitivity to N:P balance.
    - Measurement noise.

    Replace this function with the actual experimental measurement or a validated simulator:
      - Run a batch with the given concentrations.
      - Measure biomass concentration at the end (e.g., dry cell weight, g/L).
      - Return {"biomass_yield": measured_value} or {"biomass_yield": (mean, sem)}.

    Parameters
    ----------
    glucose_g_per_L : float
        Glucose concentration in g/L (5–30).
    nitrogen_g_per_L : float
        Total nitrogen source concentration in g/L (1–8).
    phosphate_g_per_L : float
        Phosphate concentration in g/L (0.5–3).

    Returns
    -------
    dict
        {"biomass_yield": (mean, sem)} with yield in g/L.
    """
    # Stoichiometric capacity (simple proxies):
    # Assume biomass yield of 0.5 g biomass per g glucose (Yx/s = 0.5).
    capacity_from_glucose = 0.5 * glucose_g_per_L  # g/L biomass
    # Assume ~0.1 g N needed per g biomass -> 10 g biomass per 1 g N.
    capacity_from_nitrogen = 10.0 * nitrogen_g_per_L
    # Assume ~0.02 g P needed per g biomass -> 50 g biomass per 1 g P.
    capacity_from_phosphate = 50.0 * phosphate_g_per_L

    base_capacity = min(capacity_from_glucose, capacity_from_nitrogen, capacity_from_phosphate)

    # Inhibition/saturation penalties for excessively high concentrations
    # Center near plausible optima: G~18, N~4, P~1.5 (units g/L)
    g_opt, n_opt, p_opt = 18.0, 4.0, 1.5
    g_width, n_width, p_width = 10.0, 3.0, 1.0  # larger width => weaker penalty
    penalty_g = np.exp(-((max(0.0, glucose_g_per_L - (g_opt + 7.0)) / g_width) ** 2))
    penalty_n = np.exp(-((max(0.0, nitrogen_g_per_L - (n_opt + 2.0)) / n_width) ** 2))
    penalty_p = np.exp(-((max(0.0, phosphate_g_per_L - (p_opt + 0.6)) / p_width) ** 2))

    # Encourage N:P balance near ~5:1 (mass-based from assumed stoichiometry)
    ratio_np = nitrogen_g_per_L / max(1e-6, phosphate_g_per_L)
    ratio_penalty = np.exp(-((ratio_np - 5.0) ** 2) / 8.0)

    # Monod-like saturation for glucose at low concentrations (helps curvature)
    Ks_g = 2.0
    monod_g = glucose_g_per_L / (Ks_g + glucose_g_per_L)

    # Aggregate efficiency factor in [0, 1.2] range (allow slight synergy boost)
    efficiency = 1.2 * monod_g * penalty_g * penalty_n * penalty_p * ratio_penalty
    mean_yield = base_capacity * efficiency

    # Add heteroscedastic-like noise: larger absolute yields may have slightly higher SEM
    rng = np.random.default_rng(12345)  # fixed for reproducibility; remove/modify for real runs
    sem = 0.5 + 0.03 * mean_yield  # g/L
    observed_yield = rng.normal(loc=mean_yield, scale=sem)

    # Ensure non-negative yield
    observed_yield = float(max(0.0, observed_yield))
    sem = float(max(0.1, sem))

    return {objective_name: (observed_yield, sem)}


# Initialize Ax client
ax_client = AxClient(random_seed=2025)

ax_client.create_experiment(
    name="fermentation_medium_optimization",
    parameters=[
        {"name": "glucose", "type": "range", "bounds": [5.0, 30.0]},
        {"name": "nitrogen", "type": "range", "bounds": [1.0, 8.0]},
        {"name": "phosphate", "type": "range", "bounds": [0.5, 3.0]},
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=False),
    },
)

# Optimization budget: 30 trials
num_trials = 30

for _ in range(num_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    glucose = float(parameterization["glucose"])
    nitrogen = float(parameterization["nitrogen"])
    phosphate = float(parameterization["phosphate"])

    results = evaluate_fermentation(glucose, nitrogen, phosphate)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, best_values = ax_client.get_best_parameters()

# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives[0]], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.maximum.accumulate(df[objectives[0]]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{objectives[0]} (g/L)")
ax.set_title("Fermentation Medium Optimization: Biomass Yield")

ax.legend()
plt.tight_layout()
plt.show()