# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt

# Multi-objective names for this formulation problem
texture_metric = "texture_score"
taste_metric = "taste_score"


def evaluate_protein_bar_formulation(protein_powder: float, sweetener: float, binder: float, flavoring: float):
    """
    Evaluate the protein bar formulation on two objectives:
    - texture_score: sensory texture (1-10, higher is better)
    - taste_score: sensory taste (1-10, higher is better)

    Notes:
    - We implement a realistic synthetic model capturing common formulation tradeoffs.
    - Since the specified ingredient bounds cannot sum to 1.0 simultaneously (max sum = 0.88),
      we relax the composition requirement and model the remainder as a neutral "base" component:
        base_fraction = max(0, 1.0 - (protein_powder + sweetener + binder + flavoring))
      The base fraction mildly penalizes both texture and taste to encourage using as much of
      the 100% formulation as possible while staying within ingredient bounds.
    - Additive Gaussian noise is added to simulate measurement noise and we return SEMs accordingly.
    """
    rng = np.random.default_rng()  # independent noise each call
    total_active = protein_powder + sweetener + binder + flavoring
    base_fraction = max(0.0, 1.0 - total_active)

    # Texture model: binder provides cohesion with an optimum, protein can toughen if too high,
    # sweetener softens slightly, flavoring has a minor effect. Excess base reduces cohesiveness.
    binder_opt = 0.18
    protein_opt_tex = 0.32

    tex_penalty = (
        2.2 * ((protein_powder - protein_opt_tex) / 0.07) ** 2
        + 3.0 * ((binder - binder_opt) / 0.04) ** 2
        + 0.4 * ((max(0.0, 0.06 - sweetener)) / 0.06) ** 2
        + 1.2 * (base_fraction / 0.15) ** 2
    )
    # Positive synergy for protein+binder near an ideal ratio
    tex_synergy = 1.2 * np.exp(-((protein_powder - 0.33) ** 2 / 0.008 + (binder - 0.19) ** 2 / 0.003))
    texture = 10.0 - tex_penalty + tex_synergy

    # Taste model: sweetener and flavoring have optima, protein slightly reduces palatability if high,
    # binder mild effect, base fraction dilutes taste.
    sweet_opt = 0.11
    flavor_opt = 0.05
    taste_penalty = (
        4.0 * ((sweetener - sweet_opt) / 0.03) ** 2
        + 3.0 * ((flavoring - flavor_opt) / 0.015) ** 2
        + 1.3 * ((protein_powder - 0.30) / 0.10) ** 2
        + 0.5 * ((binder - 0.15) / 0.07) ** 2
        + 1.0 * (base_fraction / 0.20) ** 2
    )
    # Sweetener + flavor synergy around their joint optima
    taste_synergy = 1.0 * np.exp(-((sweetener - 0.12) ** 2 / 0.0006 + (flavoring - 0.05) ** 2 / 0.0002))
    taste = 10.0 - taste_penalty + taste_synergy

    # Bound scores to [1, 10]
    texture = float(np.clip(texture, 1.0, 10.0))
    taste = float(np.clip(taste, 1.0, 10.0))

    # Add measurement noise and provide SEMs
    noise_tex = 0.25
    noise_taste = 0.30
    texture_obs = float(texture + rng.normal(0.0, noise_tex))
    taste_obs = float(taste + rng.normal(0.0, noise_taste))

    # Clip observed values to plausible panel scale
    texture_obs = float(np.clip(texture_obs, 1.0, 10.0))
    taste_obs = float(np.clip(taste_obs, 1.0, 10.0))

    return {
        texture_metric: (texture_obs, noise_tex),
        taste_metric: (taste_obs, noise_taste),
    }


# Create Ax client and experiment
ax_client = AxClient()

# Important: With the given per-ingredient bounds, the sum of the four ingredients cannot equal 1.0.
# We therefore relax the compositional constraint to a sum <= 1.0 and treat the remainder as a neutral base.
ax_client.create_experiment(
    name="protein_bar_formulation_moo",
    parameters=[
        {"name": "protein_powder", "type": "range", "bounds": [0.20, 0.40]},
        {"name": "sweetener", "type": "range", "bounds": [0.05, 0.15]},
        {"name": "binder", "type": "range", "bounds": [0.10, 0.25]},
        {"name": "flavoring", "type": "range", "bounds": [0.02, 0.08]},
    ],
    objectives={
        texture_metric: ObjectiveProperties(minimize=False),
        taste_metric: ObjectiveProperties(minimize=False),
    },
    parameter_constraints=[
        # Relaxed composition: four ingredients sum to at most 100% of the bar.
        "protein_powder + sweetener + binder + flavoring <= 1.0",
    ],
)

# Budget: 35 trials
N_TRIALS = 35
for _ in range(N_TRIALS):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    p = float(parameterization["protein_powder"])
    s = float(parameterization["sweetener"])
    b = float(parameterization["binder"])
    f = float(parameterization["flavoring"])

    results = evaluate_protein_bar_formulation(p, s, b, f)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

# Retrieve Pareto-optimal points (observed)
pareto_map = ax_client.get_pareto_optimal_parameters(use_model_predictions=False)

# Convert Pareto metrics to DataFrame for plotting
pareto_points = []
for _, (params, metrics) in pareto_map.items():
    if texture_metric in metrics and taste_metric in metrics:
        pareto_points.append(
            {
                texture_metric: float(metrics[texture_metric][0]),
                taste_metric: float(metrics[taste_metric][0]),
            }
        )
pareto_df = pd.DataFrame(pareto_points).sort_values(texture_metric) if len(pareto_points) > 0 else pd.DataFrame(
    columns=[texture_metric, taste_metric]
)

# All trials dataframe
df = ax_client.get_trials_data_frame()
observed = df.dropna(subset=[texture_metric, taste_metric])

# Plot results
fig, ax = plt.subplots(figsize=(7, 5), dpi=150)
ax.scatter(
    observed[texture_metric],
    observed[taste_metric],
    fc="None",
    ec="k",
    label="Observed",
)

if len(pareto_df) > 0:
    ax.plot(
        pareto_df[texture_metric],
        pareto_df[taste_metric],
        color="#0033FF",
        lw=2,
        label="Pareto Front",
    )

ax.set_xlabel(texture_metric.replace("_", " ").title())
ax.set_ylabel(taste_metric.replace("_", " ").title())
ax.set_title("Protein Bar Formulation: Texture vs Taste")
ax.legend()
plt.tight_layout()
plt.show()

# Print the top Pareto candidates with parameters for inspection
if len(pareto_map) > 0:
    print("Pareto-optimal formulations (observed):")
    for arm_name, (params, metrics) in pareto_map.items():
        p = params["protein_powder"]
        s = params["sweetener"]
        b = params["binder"]
        f = params["flavoring"]
        total = p + s + b + f
        base_fraction = max(0.0, 1.0 - total)
        tex = metrics[texture_metric][0]
        tas = metrics[taste_metric][0]
        print(
            f"- {arm_name}: protein={p:.3f}, sweetener={s:.3f}, binder={b:.3f}, flavoring={f:.3f}, "
            f"base={base_fraction:.3f} | texture={tex:.2f}, taste={tas:.2f}"
        )