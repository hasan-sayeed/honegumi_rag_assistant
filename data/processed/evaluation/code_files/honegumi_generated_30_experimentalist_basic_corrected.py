# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


def evaluate_oxygen_permeability(film_thickness: float, coating_weight: float) -> float:
    """
    Deterministic surrogate for oxygen permeability (cc/m²/day) of a packaged film.

    Parameters
    - film_thickness (μm): 20–80
    - coating_weight (g/m²): 2–10

    Model assumptions (plausible, for simulation only):
    - Permeability decreases with both thickness and coating weight with diminishing returns.
    - Excessively heavy coatings (>~7 g/m²) can increase permeability due to microcracking.
    - Synergy: coatings are more effective on thinner films.

    Returns
    - Oxygen permeability (cc/m²/day), lower is better (noiseless).
    """
    # Clamp to domain for safety
    t = float(np.clip(film_thickness, 20.0, 80.0))  # μm
    c = float(np.clip(coating_weight, 2.0, 10.0))   # g/m²

    # Normalize for interactions
    t_scaled = (t - 20.0) / (80.0 - 20.0)  # 0 (thin) to 1 (thick)
    c_scaled = (c - 2.0) / (10.0 - 2.0)    # 0 (light) to 1 (heavy)

    # Base: thinner films are more permeable (inverse dependence on thickness)
    base_term = 220.0 / t  # cc/m²/day

    # Coating barrier with diminishing returns
    coating_term = 90.0 / (1.0 + 5.0 * c)  # cc/m²/day

    # Synergy: coating slightly more effective on thin films
    synergy_gain = 8.0 * (1.0 - t_scaled) * c_scaled  # subtracts permeability

    # Manufacturing penalty: heavy coatings may introduce microcracks (stronger when thin)
    excess = max(0.0, c - 7.0)
    microcrack_penalty = (excess ** 2) * (0.5 + 0.5 * (1.0 - t_scaled))

    permeability = base_term + coating_term - synergy_gain + microcrack_penalty

    # Ensure physical positivity and return as float
    return float(max(0.05, permeability))


# Set up Ax optimization client
ax_client = AxClient(random_seed=42)

# Define experiment: minimize oxygen permeability by tuning film thickness and coating weight
ax_client.create_experiment(
    parameters=[
        {"name": "film_thickness", "type": "range", "bounds": [20.0, 80.0]},  # μm
        {"name": "coating_weight", "type": "range", "bounds": [2.0, 10.0]},   # g/m²
    ],
    objectives={
        "oxygen_permeability": ObjectiveProperties(minimize=True),
    },
)

# Optimization budget
total_trials = 24

for _ in range(total_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    film_thickness = parameterization["film_thickness"]
    coating_weight = parameterization["coating_weight"]

    # Evaluate (noiseless)
    permeability = evaluate_oxygen_permeability(film_thickness, coating_weight)

    # Report result back to Ax
    ax_client.complete_trial(
        trial_index=trial_index,
        raw_data={"oxygen_permeability": permeability},
    )

# Retrieve best found parameters and objective value
best_parameters, best_values = ax_client.get_best_parameters()
best_value = best_values["oxygen_permeability"]

print("Best parameterization found:")
print(best_parameters)
print("Best oxygen permeability (cc/m²/day):")
print(best_value)

# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

# Sort by trial index if available for a clean trace
if "trial_index" in df.columns:
    df_plot = df.sort_values("trial_index").reset_index(drop=True)
else:
    df_plot = df.copy().reset_index(drop=True)

obj_col = objectives[0]
y = pd.to_numeric(df_plot[obj_col], errors="coerce").values
x = np.arange(len(y))

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(x, y, ec="k", fc="none", label="Observed")
ax.plot(x, np.minimum.accumulate(y), color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{obj_col} (cc/m²/day)")
ax.set_title("Optimization of Oxygen Permeability")
ax.legend()
plt.tight_layout()
plt.show()