# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# Generated for LED packaging thermal optimization using Ax Platform
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from typing import Dict, Tuple
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


objective_name = "junction_temperature_celsius"


def evaluate_led_package_junction_temperature(
    heat_sink_area_mm2: float,
    thermal_paste_thickness_um: float,
    led_power_w: float = 3.0,
    ambient_celsius: float = 25.0,
    thermal_conductivity_paste_w_per_mk: float = 3.0,
    convective_h_w_per_m2k: float = 150.0,
    junction_to_case_k_per_w: float = 2.0,
) -> Dict[str, Tuple[float, float]]:
    """
    Deterministic thermal model for LED package junction temperature (°C).
    Parameters:
      - heat_sink_area_mm2: Heat sink exposed area in mm^2 (100–500).
      - thermal_paste_thickness_um: TIM thickness in μm (50–200).
      - led_power_w: Electrical power dissipated as heat (W).
      - ambient_celsius: Ambient temperature (°C).
      - thermal_conductivity_paste_w_per_mk: TIM thermal conductivity (W/m·K).
      - convective_h_w_per_m2k: Effective convection coefficient (W/m^2·K).
      - junction_to_case_k_per_w: LED junction-to-case thermal resistance (K/W).

    Model:
      R_total = R_jc + R_interface + R_sink
      R_sink = 1 / (h * A)
      R_interface = t / (k * A)
      Tj = T_ambient + P * R_total
      where:
        A is area in m^2, t is thickness in m, P is power in W.

    Returns:
      Dict with the metric name mapped to (mean, SEM). SEM set to 0.0 for deterministic measurements.
    """
    # Unit conversions
    area_m2 = heat_sink_area_mm2 * 1e-6  # 1 mm^2 = 1e-6 m^2
    thickness_m = thermal_paste_thickness_um * 1e-6  # 1 μm = 1e-6 m

    # Avoid numerical issues for extremely small values (should not trigger within given bounds)
    area_m2 = max(area_m2, 1e-8)
    thickness_m = max(thickness_m, 1e-8)

    # Thermal resistance components
    r_sink_k_per_w = 1.0 / (convective_h_w_per_m2k * area_m2)
    r_interface_k_per_w = thickness_m / (thermal_conductivity_paste_w_per_mk * area_m2)
    r_total_k_per_w = junction_to_case_k_per_w + r_interface_k_per_w + r_sink_k_per_w

    # Junction temperature
    junction_temp_c = ambient_celsius + led_power_w * r_total_k_per_w

    # Deterministic measurement (SEM = 0.0)
    return {objective_name: (float(junction_temp_c), 0.0)}


# Set up optimization client
ax_client = AxClient(random_seed=42)

ax_client.create_experiment(
    name="led_package_thermal_optimization",
    parameters=[
        {
            "name": "heat_sink_area_mm2",
            "type": "range",
            "bounds": [100.0, 500.0],
        },
        {
            "name": "thermal_paste_thickness_um",
            "type": "range",
            "bounds": [50.0, 200.0],
        },
    ],
    objectives={
        objective_name: ObjectiveProperties(minimize=True),
    },
)

# Budget: 28 trials
for _ in range(28):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    heat_sink_area_mm2 = float(parameterization["heat_sink_area_mm2"])
    thermal_paste_thickness_um = float(parameterization["thermal_paste_thickness_um"])

    # Evaluate deterministic thermal model
    results = evaluate_led_package_junction_temperature(
        heat_sink_area_mm2=heat_sink_area_mm2,
        thermal_paste_thickness_um=thermal_paste_thickness_um,
    )
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, best_metrics = ax_client.get_best_parameters()

print("Best parameterization found:")
print(best_parameters)
print("Best metrics:")
print(best_metrics)

# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
y = df[objective_name].values
ax.scatter(df.index, y, ec="k", fc="none", label="Observed")
ax.plot(df.index, np.minimum.accumulate(y), color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{objective_name} (°C)")
ax.legend()
plt.tight_layout()
plt.show()