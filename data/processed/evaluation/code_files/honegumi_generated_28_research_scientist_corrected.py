# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# Generated for solvent extraction efficiency optimization using Ax Platform
# %pip install ax-platform==0.4.3 matplotlib numpy pandas
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Random generator for reproducibility of the simulated evaluation
RNG = np.random.default_rng(seed=42)


def evaluate_solvent_extraction(temperature_celsius: float, solvent_to_feed_ratio_vv: float) -> dict:
    """
    Simulate the solvent extraction efficiency (%) given temperature and solvent/feed ratio.

    This is a realistic surrogate for demonstration. Replace with actual laboratory
    measurement or high-fidelity simulation when available.

    Parameters
    ----------
    temperature_celsius : float
        Extraction temperature in degrees Celsius (20 to 60).
    solvent_to_feed_ratio_vv : float
        Solvent-to-feed volumetric ratio (v/v), from 1.0 (1:1) to 5.0 (1:5).

    Returns
    -------
    dict
        Mapping of the metric name to a (mean, SEM) tuple for Ax. Here we add simulated
        measurement noise to the mean and report a nominal SEM to model a noisy objective.
    """
    T = float(temperature_celsius)
    R = float(solvent_to_feed_ratio_vv)

    # Temperature effect: bell-shaped around an optimal temperature
    T_opt = 45.0  # °C
    T_width = 9.0  # standard deviation of the temperature sensitivity
    temp_effect = np.exp(-0.5 * ((T - T_opt) / T_width) ** 2)

    # Solvent ratio effect: saturating improvement with diminishing returns
    # At R=1, effect ~0; as R increases, approaches 1 asymptotically
    alpha = 0.7
    ratio_effect = 1.0 - np.exp(-alpha * (R - 1.0))

    # Maximum performance and baseline
    baseline_eff = 5.0  # % efficiency at very poor conditions
    max_eff = 95.0      # % efficiency cap under ideal conditions

    # Interaction model with mild synergistic term
    interaction = 0.15 * temp_effect * ratio_effect
    efficiency_mean = baseline_eff + (max_eff - baseline_eff) * temp_effect * ratio_effect * (1.0 + interaction)

    # Add measurement noise (simulate a noisy experiment)
    noise_sd = 1.0  # absolute percentage points
    measured_efficiency = float(efficiency_mean + RNG.normal(loc=0.0, scale=noise_sd))

    # Clip to physical bounds [0, 100] %
    measured_efficiency = float(np.clip(measured_efficiency, 0.0, 100.0))

    # Report a nominal SEM to let Ax model observation noise
    reported_sem = 1.0

    return {"efficiency_percent": (measured_efficiency, reported_sem)}


# Set up the Ax client and experiment
ax_client = AxClient(random_seed=12345)
ax_client.create_experiment(
    name="solvent_extraction_efficiency_optimization",
    parameters=[
        {"name": "temperature_celsius", "type": "range", "bounds": [20.0, 60.0]},
        {"name": "solvent_to_feed_ratio_vv", "type": "range", "bounds": [1.0, 5.0]},
    ],
    objectives={
        "efficiency_percent": ObjectiveProperties(minimize=False),
    },
    parameter_constraints=[],
    outcome_constraints=[],
)

# Run optimization for the allocated budget of 26 experiments
TOTAL_TRIALS = 26
for _ in range(TOTAL_TRIALS):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract current parameters
    temp_c = parameterization["temperature_celsius"]
    ratio_vv = parameterization["solvent_to_feed_ratio_vv"]

    # Evaluate the experiment (replace with real measurement when available)
    results = evaluate_solvent_extraction(temp_c, ratio_vv)

    # Complete the trial with observed data
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

# Retrieve best parameters and corresponding metric
best_parameters, best_values = ax_client.get_best_parameters()
best_efficiency = best_values["efficiency_percent"]["mean"]
best_sem = best_values["efficiency_percent"].get("sem", None)

print("Best parameters found:")
print(f"  temperature_celsius: {best_parameters['temperature_celsius']:.3f} °C")
print(f"  solvent_to_feed_ratio_vv: {best_parameters['solvent_to_feed_ratio_vv']:.3f} v/v")
if best_sem is not None:
    print(f"Best observed efficiency: {best_efficiency:.3f} % ± {best_sem:.3f} (SEM)")
else:
    print(f"Best observed efficiency: {best_efficiency:.3f} %")

# Plot results: observed efficiency and running best (maximize)
objective_name = "efficiency_percent"
df = ax_client.get_trials_data_frame()
df_sorted = df.sort_values("trial_index").reset_index(drop=True)

x = df_sorted["trial_index"].to_numpy()
y = df_sorted[objective_name].to_numpy(dtype=float)

best_to_date = np.maximum.accumulate(y)

fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
ax.scatter(x, y, ec="k", fc="none", label="Observed efficiency")
ax.plot(x, best_to_date, color="#0033FF", lw=2, label="Best to trial (max)")
ax.set_xlabel("Trial Number")
ax.set_ylabel("Efficiency (%)")
ax.set_title("Solvent Extraction: Efficiency Optimization")
ax.grid(True, alpha=0.3)
ax.legend()
plt.tight_layout()
plt.show()