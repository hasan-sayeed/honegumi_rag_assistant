# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import math
from typing import Dict

import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Problem: Packaging design optimization to minimize oxygen permeability (cc/m²/day)
# Parameters:
#   - thickness_microns: 20–80 μm
#   - coating_weight_g_per_m2: 2–10 g/m²
# Budget: 24 trials (single-objective, single-task, default GP, noisy observations)


oxygen_permeability_metric_name = "oxygen_permeability_cc_per_m2_day"

# Reproducible noise generator to simulate measurement noise in a realistic manner
_rng = np.random.default_rng(seed=20241031)


def evaluate_oxygen_permeability(thickness_microns: float, coating_weight_g_per_m2: float) -> float:
    """
    Simulated evaluation of oxygen permeability (cc/m²/day) for a flexible package
    as a function of film thickness and barrier coating weight.

    This is a realistic, physics-inspired stub meant to be replaced with actual
    experimental measurement or high-fidelity simulation.

    Model rationale (stylized):
      - Oxygen transmission rate (OTR) inversely scales with thickness (diffusion path length).
      - Barrier coating reduces permeability with diminishing returns (exponential improvement).
      - Excessive coating weight can induce microcracking or brittleness -> penalty term.
      - Small Gaussian noise to reflect measurement variability.

    Parameters
    ----------
    thickness_microns : float
        Film thickness in micrometers (μm).
    coating_weight_g_per_m2 : float
        Coating weight in grams per square meter (g/m²).

    Returns
    -------
    float
        Oxygen permeability in cc/m²/day (lower is better).
    """
    # Reference values for baseline scaling
    ref_thickness_um = 25.0
    baseline_otr_at_ref = 120.0  # cc/m²/day at 25 μm with no coating (stylized baseline)

    # Core effects
    thickness_effect = (ref_thickness_um / thickness_microns) ** 1.0  # inverse proportionality
    coating_improvement = math.exp(-0.35 * coating_weight_g_per_m2)  # diminishing returns

    # Penalties for over-coating (microcracks) and very thick films (handling/manufacturing defects)
    overcoat_excess = max(0.0, coating_weight_g_per_m2 - 8.0)
    overcoat_penalty = 1.0 + 0.18 * (overcoat_excess ** 2)

    very_thick_excess = max(0.0, thickness_microns - 75.0)
    thick_penalty = 1.0 + 0.06 * (very_thick_excess ** 2) / 100.0

    modeled_otr = baseline_otr_at_ref * thickness_effect * coating_improvement * overcoat_penalty * thick_penalty

    # Additive and proportional noise to mimic experimental variability
    rel_noise_sd = 0.06  # 6% relative noise
    abs_noise_sd = 0.3   # small absolute noise floor
    noise = modeled_otr * _rng.normal(loc=0.0, scale=rel_noise_sd) + _rng.normal(loc=0.0, scale=abs_noise_sd)

    observed_otr = max(0.02, modeled_otr + noise)  # ensure strictly positive
    return float(observed_otr)


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "thickness_microns", "type": "range", "bounds": [20.0, 80.0]},
        {"name": "coating_weight_g_per_m2", "type": "range", "bounds": [2.0, 10.0]},
    ],
    objectives={
        oxygen_permeability_metric_name: ObjectiveProperties(minimize=True),
    },
)

# Run optimization for the specified budget
budget_trials = 24

for i in range(budget_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    # Extract parameters
    thickness_microns = float(parameterization["thickness_microns"])
    coating_weight_g_per_m2 = float(parameterization["coating_weight_g_per_m2"])

    # Evaluate objective (replace this with actual measurement in production)
    result = evaluate_oxygen_permeability(thickness_microns, coating_weight_g_per_m2)

    # Report result back to Ax (unknown noise -> pass scalar)
    ax_client.complete_trial(trial_index=trial_index, raw_data=result)

best_parameters, best_metrics = ax_client.get_best_parameters()

# Print best found configuration and metric
best_metric_name = oxygen_permeability_metric_name
best_value = best_metrics[best_metric_name]["mean"] if isinstance(best_metrics[best_metric_name], dict) else best_metrics[best_metric_name]
print("Best parameters found:")
print(best_parameters)
print(f"Best {best_metric_name}: {best_value:.4f} cc/m²/day")

# Visualizations
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

metric_col = objectives[0]
trial_numbers = df.index.values
y_values = df[metric_col].values

fig, ax = plt.subplots(figsize=(7, 4.5), dpi=150)
ax.scatter(trial_numbers, y_values, ec="k", fc="none", label="Observed")
ax.plot(trial_numbers, np.minimum.accumulate(y_values), color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel("Oxygen Permeability (cc/m²/day)")
ax.set_title("Optimization Progress")
ax.legend()

# 2D parameter scatter colored by oxygen permeability
if {"thickness_microns", "coating_weight_g_per_m2"}.issubset(df.columns):
    fig2, ax2 = plt.subplots(figsize=(6, 5), dpi=150)
    sc = ax2.scatter(
        df["thickness_microns"].values,
        df["coating_weight_g_per_m2"].values,
        c=y_values,
        cmap="viridis_r",
        ec="k",
    )
    ax2.set_xlabel("Thickness (μm)")
    ax2.set_ylabel("Coating weight (g/m²)")
    ax2.set_title("Parameter Space Samples (colored by OTR)")
    cbar = plt.colorbar(sc, ax=ax2)
    cbar.set_label("Oxygen Permeability (cc/m²/day)")

plt.tight_layout()
plt.show()