# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


obj1_name = "branin"


def branin(x1, x2):
    y = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    return y


ax_client = AxClient()

ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
    ],
    objectives={
        obj1_name: ObjectiveProperties(minimize=True),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial()

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    results = branin(x1, x2)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

best_parameters, metrics = ax_client.get_best_parameters()


# Plot results
objectives = ax_client.objective_names
df = ax_client.get_trials_data_frame()

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, df[objectives], ec="k", fc="none", label="Observed")
ax.plot(
    df.index,
    np.minimum.accumulate(df[objectives]),
    color="#0033FF",
    lw=2,
    label="Best to Trial",
)
ax.set_xlabel("Trial Number")
ax.set_ylabel(objectives[0])

ax.legend()
plt.show()

# Optimizing carbon fiber composite curing for maximum tensile strength (MPa)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Dict

from ax.service.ax_client import AxClient, ObjectiveProperties


# Metric (objective) name
TENSILE_STRENGTH_METRIC = "tensile_strength_mpa"


def evaluate_curing_process(cure_temperature_c: float, cure_time_h: float) -> Dict[str, float]:
    """
    Evaluate tensile strength (MPa) for a given curing schedule.

    In production:
      - Run the cure cycle at (cure_temperature_c, cure_time_h)
      - Prepare tensile specimens and test per the relevant standard (e.g., ASTM D3039)
      - Record the measured tensile strength (MPa) and return it below

    This stub uses a deterministic, physically inspired surrogate to make the script executable:
      - Peak strength near 165°C and 5.5 h
      - Penalizes under/over-cure and high-T/long-time resin degradation
      - Returns a plausible MPa range for illustration
    """
    T = float(cure_temperature_c)
    t = float(cure_time_h)

    # Nominal optimum
    T_opt = 165.0  # °C
    t_opt = 5.5    # hours
    strength_max = 1200.0  # MPa, nominal peak for illustration

    # Elliptical quadratic around the optimum capturing T–t tradeoff
    dT = (T - T_opt) / 10.0
    dt = (t - t_opt) / 1.2
    penalty_elliptic = 100.0 * (dT ** 2) + 80.0 * (dt ** 2) + 40.0 * dT * dt

    # Additional degradation for high temperature and long cure time
    overT = max(0.0, T - 172.0)
    long_t = max(0.0, t - 6.5)
    degradation = 0.6 * overT * long_t  # compound degradation term

    # Mild penalty near temperature/time bounds to mimic practical limits
    edge_penalty = 0.02 * ((T - 150.0) ** 2) / 900.0 + 0.05 * ((t - 5.0) ** 2)

    strength = strength_max - penalty_elliptic - degradation - 100.0 * edge_penalty

    # Keep within a plausible range
    strength = float(np.clip(strength, 400.0, 1400.0))

    return {TENSILE_STRENGTH_METRIC: strength}


def main() -> None:
    # Initialize Ax client
    ax_client = AxClient()

    # Define experiment with two continuous parameters and a single objective to maximize
    ax_client.create_experiment(
        name="carbon_fiber_curing_optimization",
        parameters=[
            {
                "name": "cure_temperature_c",
                "type": "range",
                "bounds": [120.0, 180.0],  # °C
            },
            {
                "name": "cure_time_h",
                "type": "range",
                "bounds": [2.0, 8.0],  # hours
            },
        ],
        objectives={
            TENSILE_STRENGTH_METRIC: ObjectiveProperties(minimize=False),
        },
    )

    # Run optimization for the available budget (22 panels/trials)
    total_trials = 22
    for _ in range(total_trials):
        parameterization, trial_index = ax_client.get_next_trial()

        # Extract parameters
        cure_temperature_c = float(parameterization["cure_temperature_c"])
        cure_time_h = float(parameterization["cure_time_h"])

        # Evaluate (replace with actual lab measurement in production)
        results = evaluate_curing_process(cure_temperature_c, cure_time_h)

        # Since strength testing is reliable, we treat measurements as noise-free
        # Passing just the mean values is equivalent to SEM=0 for Ax
        ax_client.complete_trial(trial_index=trial_index, raw_data=results)

    # Retrieve best settings and corresponding strength
    best_parameters, metrics = ax_client.get_best_parameters()
    best_strength = metrics[TENSILE_STRENGTH_METRIC][0] if isinstance(metrics[TENSILE_STRENGTH_METRIC], tuple) else metrics[TENSILE_STRENGTH_METRIC]

    print("Best curing schedule found:")
    print(f"  - cure_temperature_c: {best_parameters['cure_temperature_c']:.2f} °C")
    print(f"  - cure_time_h:        {best_parameters['cure_time_h']:.2f} h")
    print(f"Predicted tensile strength: {best_strength:.2f} MPa")

    # Plot optimization trace
    objectives = ax_client.objective_names
    df = ax_client.get_trials_data_frame()

    objective_col = objectives[0]
    y_series = df[objective_col].astype(float)

    fig, ax = plt.subplots(figsize=(7, 4), dpi=150)
    ax.scatter(df.index, y_series, ec="k", fc="none", label="Observed")
    ax.plot(df.index, np.maximum.accumulate(y_series.values), color="#0033FF", lw=2, label="Best to Trial")
    ax.set_xlabel("Trial Number")
    ax.set_ylabel("Tensile Strength (MPa)")
    ax.set_title("Curing Optimization: Tensile Strength")
    ax.legend()
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    main()