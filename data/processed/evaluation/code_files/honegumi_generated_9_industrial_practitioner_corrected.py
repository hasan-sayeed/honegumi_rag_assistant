# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3 matplotlib
import numpy as np
import pandas as pd
from ax.service.ax_client import AxClient, ObjectiveProperties
import matplotlib.pyplot as plt


# Problem: High-strength concrete mix design optimization
# Objective: Maximize compressive strength (MPa)
# Parameters (wt%): cement [15, 25], water [5, 15], aggregate [60, 80]
# Constraints: cement + water + aggregate = 100
#              cement > water
#              aggregate > cement
#              aggregate > water
# Budget: 20 trials (sequential), noisy measurements


metric_name = "compressive_strength_mpa"
rng = np.random.default_rng(2025)


def evaluate_concrete_mix(cement: float, water: float, aggregate: float) -> dict:
    """
    Simulated evaluation of compressive strength (MPa) for a given concrete mix.

    This synthetic model captures:
      - Strong dependence on water-to-cement ratio (w/c): lower w/c increases strength.
      - Diminishing returns with higher cement content.
      - Aggregate packing effect with optimum near ~72 wt% aggregate.
      - Additive measurement noise (~2 MPa) to mimic experimental noise.

    Inputs are in wt% and expected to satisfy:
      cement + water + aggregate = 100 (enforced by Ax constraints)
      cement > water; aggregate > cement; aggregate > water

    Returns:
      { "compressive_strength_mpa": float }
    """
    # Numerical safeguard: keep within reasonable physical bounds
    cement = float(np.clip(cement, 15.0, 25.0))
    water = float(np.clip(water, 5.0, 15.0))
    aggregate = float(np.clip(aggregate, 60.0, 80.0))

    # Water-to-cement ratio
    w_c = max(1e-6, water / cement)

    # w/c term: clip to avoid unrealistic extremes
    wc_term = np.clip(55.0 * (0.42 / w_c) ** 1.5, 5.0, 100.0)

    # Cement content term: diminishing returns with more cement
    cement_term = 10.0 * np.log1p(((cement - 15.0) / 10.0) * np.e)  # ~0 to ~13 MPa boost

    # Aggregate packing effect around ~72 wt%
    agg_optimum = 72.0
    agg_term = 15.0 - 0.05 * (aggregate - agg_optimum) ** 2  # <= 15 MPa boost at optimum

    # Combine and add measurement noise
    raw_strength = wc_term + cement_term + agg_term
    noise = rng.normal(0.0, 2.0)  # measurement noise (SEM ~ 2 MPa)
    strength_mpa = max(0.0, float(raw_strength + noise))

    return {metric_name: strength_mpa}


ax_client = AxClient(enforce_sequential_optimization=True)

ax_client.create_experiment(
    name="high_strength_concrete_optimization",
    parameters=[
        {"name": "cement", "type": "range", "bounds": [15.0, 25.0]},
        {"name": "water", "type": "range", "bounds": [5.0, 15.0]},
        {"name": "aggregate", "type": "range", "bounds": [60.0, 80.0]},
    ],
    objectives={
        metric_name: ObjectiveProperties(minimize=False),
    },
    parameter_constraints=[
        # Composition equality: enforce as a pair of inequalities
        "cement + water + aggregate <= 100.0",
        "-cement - water - aggregate <= -100.0",
        # Ordering constraints with a small margin to approximate strict >
        "water - cement <= -0.01",      # cement > water
        "cement - aggregate <= -0.01",  # aggregate > cement
        "water - aggregate <= -0.01",   # aggregate > water
    ],
    overwrite_existing_experiment=True,
)

# Optimization loop (budget: 20 trials)
num_trials = 20
for _ in range(num_trials):
    parameterization, trial_index = ax_client.get_next_trial()

    cement = parameterization["cement"]
    water = parameterization["water"]
    aggregate = parameterization["aggregate"]

    try:
        results = evaluate_concrete_mix(cement, water, aggregate)
        ax_client.complete_trial(trial_index=trial_index, raw_data=results)
    except Exception as e:
        # In case of evaluation failure, mark the trial failed so Ax can proceed
        ax_client.log_trial_failure(trial_index=trial_index)
        print(f"Trial {trial_index} failed with error: {e}")

best_parameters, best_values = ax_client.get_best_parameters()

print("Best mix (wt%):", best_parameters)
print("Best observed compressive strength (MPa):", best_values[metric_name]["observed"])

# Plot results
df = ax_client.get_trials_data_frame()
yvals = df[metric_name].values
best_to_date = np.maximum.accumulate(yvals)

fig, ax = plt.subplots(figsize=(6, 4), dpi=150)
ax.scatter(df.index, yvals, ec="k", fc="none", label="Observed")
ax.plot(df.index, best_to_date, color="#0033FF", lw=2, label="Best to Trial")
ax.set_xlabel("Trial Number")
ax.set_ylabel(f"{metric_name} (MPa)")
ax.set_title("High-Strength Concrete: Compressive Strength vs. Trial")
ax.legend()
plt.tight_layout()
plt.show()