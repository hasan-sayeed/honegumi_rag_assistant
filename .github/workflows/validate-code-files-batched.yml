name: Validate Generated Code Files (Batched)
# Validates Python files in batches with configurable batch size and 90-minute timeout

on:
  workflow_dispatch:
    inputs:
      batch_size:
        description: 'Number of files per batch'
        required: false
        default: '15'
  push:
    paths:
      - 'data/processed/evaluation/code_files/**'
      - 'scripts/validate_code_files.py'
      - '.github/workflows/validate-code-files-batched.yml'
  pull_request:
    paths:
      - 'data/processed/evaluation/code_files/**'
      - 'scripts/validate_code_files.py'
      - '.github/workflows/validate-code-files-batched.yml'

jobs:
  prepare-batches:
    runs-on: ubuntu-latest
    outputs:
      batch_ids: ${{ steps.create-batches.outputs.batch_ids }}
      batches: ${{ steps.create-batches.outputs.batches }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Create batches
        id: create-batches
        run: |
          BATCH_SIZE=${{ github.event.inputs.batch_size || '15' }}
          
          # Get list of all files
          FILES=$(python scripts/validate_code_files.py --list-files)
          echo "All files: $FILES"
          
          # Create batches using Python
          python3 << 'EOF'
          import json
          import sys
          
          files = json.loads('$FILES')
          batch_size = int('$BATCH_SIZE')
          
          if not files:
              print("batch_ids=[]", file=sys.stderr)
              print("batches={}", file=sys.stderr)
              sys.exit(0)
          
          # Create batches
          batches = {}
          for i in range(0, len(files), batch_size):
              batch_id = i // batch_size
              batch_files = files[i:i + batch_size]
              batches[str(batch_id)] = ','.join(batch_files)
          
          batch_ids = list(range(len(batches)))
          
          with open('$GITHUB_OUTPUT', 'a') as f:
              f.write(f"batch_ids={json.dumps(batch_ids)}\n")
              f.write(f"batches={json.dumps(batches)}\n")
          
          print(f"Created {len(batch_ids)} batches of up to {batch_size} files each")
          EOF

  validate:
    needs: prepare-batches
    if: needs.prepare-batches.outputs.batch_ids != '[]'
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        batch_id: ${{ fromJSON(needs.prepare-batches.outputs.batch_ids) }}
    env:
      PIP_TIMEOUT: 600
      PIP_RETRIES: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-validation.txt
      
      - name: Validate batch
        run: |
          BATCHES='${{ needs.prepare-batches.outputs.batches }}'
          BATCH_FILES=$(echo "$BATCHES" | python3 -c "import sys, json; batches=json.load(sys.stdin); print(batches['${{ matrix.batch_id }}'])")
          echo "Validating batch ${{ matrix.batch_id }}: $BATCH_FILES"
          python scripts/validate_code_files.py --batch "$BATCH_FILES" --batch-id ${{ matrix.batch_id }} --output-dir batch-results
      
      - name: Upload batch result
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: batch-result-${{ matrix.batch_id }}
          path: batch-results/batch_*.yaml
          retention-days: 30
      
      - name: Upload batch logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: batch-logs-${{ matrix.batch_id }}
          path: |
            batch-results/*.log
            batch-results/*.txt
          retention-days: 30
          if-no-files-found: ignore

  combine-results:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      PIP_TIMEOUT: 600
      PIP_RETRIES: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Download all batch results
        uses: actions/download-artifact@v4
        with:
          pattern: batch-result-*
          path: batch-results/
          merge-multiple: true
      
      - name: Download all batch logs
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: batch-logs-*
          path: batch-logs/
          merge-multiple: true
      
      - name: Combine results
        run: |
          python scripts/validate_code_files.py --combine batch-results --output-dir data/processed/evaluation
      
      - name: Upload final validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: data/processed/evaluation/validation_report.yaml
          retention-days: 90
      
      - name: Upload all batch results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: all-batch-results
          path: batch-results/
          retention-days: 90
      
      - name: Upload all logs
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: all-validation-logs
          path: batch-logs/
          retention-days: 90
      
      - name: Commit validation report
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add data/processed/evaluation/validation_report.yaml
          git diff --staged --quiet || git commit -m "Add validation report [skip ci]"
      
      - name: Push changes
        if: success() && github.event_name == 'push'
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
